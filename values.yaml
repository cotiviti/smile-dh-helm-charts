name: smilecdr
labels:
  client: internal
  application: smilecdr
  env: dev
  version: one

database:
  # Either crunchypgo or external should be set to true. Not both.
  # If using external DB, then Kubernetes secret needs to be set up with
  # the correct credentials. See docs.
  crunchypgo:
    enabled: true
    # Only change this if you change the SmileCDR username in postgresscluster.users
    # userName: smilecdr
  external:
    enabled: false
    # credentialsSource can be k8s or AWS Secrets Manager. Others to be implemented later.
    credentialsSource: k8s
    # TODO: Explain how to configure secret.
    secretName: changeme
    dbType: postgres
    port: 5432

kafka:
  enabled: false
  bootstrapAddress: kafka-example.local
  channelPrefix: SCDR-ENV-
  #TODO: More Kafka properties

specs:
  hostname: smilecdr-example.local
  # Define a common root context path, if required.
  #rootPath: /

modules:
  # Define modules to be used. Some of these will contain service definitions.
  # A service and an ingress rule will be created for modules that use services.
  # Canonical endpoint URLs will be generated by _smile-module-helpers.tpl and
  # populated in the smilecdr.services variable. These can be consumed by other
  # modules that reference them.

  clustermgr:
    name: Cluster Manager Configuration
    enabled: true
    config:
      # Valid options include H2_EMBEDDED, DERBY_EMBEDDED, MYSQL_5_7, MARIADB_10_1, POSTGRES_9_4, ORACLE_12C, MSSQL_2012
      db.driver: POSTGRES_9_4
      db.url: jdbc:postgresql://#{env['DB_URL']}:5432/#{env['DB_DATABASE']}?sslmode=require
      db.schema_update_mode:  UPDATE
      stats.heartbeat_persist_frequency_ms: 15000
      stats.stats_persist_frequency_ms: 60000
      stats.stats_cleanup_frequency_ms: 300000
      # Request headers to store in the audit log
      audit_log.request_headers_to_store: Content-Type,Host
    configFromEnv:
      db.username: DB_USER
      db.password: DB_PASS 

  persistence:
    name: Database Configuration
    enabled: true
    type: PERSISTENCE_R4
    config:
      db.driver: POSTGRES_9_4
      db.url: jdbc:postgresql://#{env['DB_URL']}:5432/#{env['DB_DATABASE']}?sslmode=require
      db.hibernate.showsql: false
      db.hibernate_search.directory: ./database/lucene_fhir_persistence
      db.schema_update_mode: UPDATE
      dao_config.expire_search_results_after_minutes: 60
      dao_config.allow_multiple_delete.enabled: false
      dao_config.allow_inline_match_url_references.enabled: false
      dao_config.allow_external_references.enabled: false
    configFromEnv:
      db.username: DB_USER
      db.password: DB_PASS

  admin_json:
    name: JSON Admin Services
    enabled: true
    type: ADMIN_JSON
    service:
      enabled: true
      svcName: admin-json
    requires:
      SECURITY_IN_UP: local_security
    config:
      context_path: json-admin
      port: 9000
      tls.enabled: false
      anonymous.access.enabled: true
      security.http.basic.enabled: true
      https_forwarding_assumed: true
      respect_forward_headers: true

  local_security:
    name: Local Storage Inbound Security
    enabled: true
    type: SECURITY_IN_LOCAL
    config:
      seed.users.file: classpath:/config_seeding/users.json
      # This is required right now as the default is not being honored.
      # Can be removed if the default gets fixed. May be good to leave it explicit.
      password_encoding_type: BCRYPT_12_ROUND

  subscription:
    name: Subscription
    enabled: true
    type: SUBSCRIPTION_MATCHER
    requires:
      PERSISTENCE_ALL: persistence

  admin_web:
    name: Web Admin
    enabled: true
    type: ADMIN_WEB
    service:
      enabled: true
      svcName: admin-web
      hostName: default
    requires:
      SECURITY_IN_UP: local_security
    config:
      context_path: ""
      port: 9100
      tls.enabled: false
      https_forwarding_assumed: true
      respect_forward_headers: true
  
  fhirweb_endpoint:
    name: FHIRWeb Console
    enabled: true
    type: ENDPOINT_FHIRWEB
    service:
      enabled: true
      svcName: fhirweb
    requires:
      SECURITY_IN_UP: local_security
      ENDPOINT_FHIR: fhir_endpoint
    config:
      context_path: fhirweb
      port: 8001
      threadpool.min: 2
      threadpool.max: 10
      tls.enabled: false
      anonymous.access.enabled: false
      https_forwarding_assumed: true
      respect_forward_headers: true
  
  # Fhir Endpoint
  fhir_endpoint:
    name: FHIR Service
    enabled: true
    type: ENDPOINT_FHIR_REST_R4
    service:
      enabled: true
      svcName: fhir
      hostName: default
    requires:
      PERSISTENCE_R4: persistence
      SECURITY_IN_UP: local_security
    config:
      context_path: fhir_request
      port: 8000
      base_url.fixed: default
      threadpool.min: 2
      threadpool.max: 10
      browser_highlight.enabled: true
      cors.enable: true
      default_encoding: JSON
      default_pretty_print: true
      tls.enabled: false
      anonymous.access.enabled: true
      security.http.basic.enabled: true
      request_validating.enabled: false
      request_validating.fail_on_severity: ERROR
      request_validating.tags.enabled: false
      request_validating.response_headers.enabled: false
      request_validating.require_explicit_profile_definition.enabled:  false
      https_forwarding_assumed: true
      respect_forward_headers: true

  smart_auth:
    name: SMART Security
    enabled: true
    type: SECURITY_OUT_SMART
    service:
      enabled: true
      svcName: smart-auth
    requires:
      CLUSTERMGR: clustermgr
      SECURITY_IN_UP: local_security
    config:
      context_path: smartauth
      port: 9200
      openid.signing.jwks_file: classpath:/smilecdr-demo.jwks
      issuer.url: default
      tls.enabled: false
      https_forwarding_assumed: true
      respect_forward_headers: true

  package_registry:
    name: Package Registry
    enabled: true
    type: ENDPOINT_PACKAGE_REGISTRY
    service:
      enabled: true
      svcName: pkg-registry
    requires:
      PACKAGE_CACHE: persistence
      SECURITY_IN_UP: local_security
    config:
      context_path: package_registry
      port: 8002
      tls.enabled: false
      anonymous.access.enabled: true
      security.http.basic.enabled: true
      https_forwarding_assumed: true
      respect_forward_headers: true

# mappedFiles:
#   testfile.txt:
#     type: configMap
#     configMapBaseName: smilecdr
#     path: /home/smile/smilecdr/classes

replicaCount: 2
image:
  repository: docker.smilecdr.com/smilecdr
  # Override only if you have created a K8s docker config secret externally to this Helm Chart
  # pullSecrets:
  #   - name: scdr-docker-secrets
  # If you specify credentials here, a K8s docker config secret will be auto generated.
  # Do not use in production environments.
  credentials:
    # Choose one of jsonfile, values, secret
    type: values
    # type: jsonfile
    # type: secret
    values:
      - registry: docker.com
        username: user
        password: pass
    pullSecrets:
      - name: scdr-docker-secretssss
    jsonfile: "misc/docker-config.json"
  pullPolicy: IfNotPresent
  # Override the image tag. Default is the chart appVersion.
  tag: '2022.08.R03'

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  # We won't define annotations here as they are defined in the helper template
  # annotations: {}
  # Define any extra annotations. Please keep cloud vendor specific annotations in the
  # helper template
  extraAnnotations: {}

ingress:
  enabled: true
  # Select the cloud vendor and GW/NLB controller being used.
  # Currently supported values are:
  # aws-lbc-nlb - AWS Load Balancer Controller (Network Load Balancer)
  # azure-appgw - Azure Application Gateway 
  type: aws-lbc-nlb
  #type: azure-appgw
  # We won't define annotations here as they are defined in the helper template
  # annotations: {}
  # Define any extra annotations. Please keep cloud vendor specific annotations in the
  # helper template
  extraAnnotations: {}

resources:
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  limits:
    cpu: "2"
    memory: 4Gi
  requests:
    cpu: "2"
    memory: 4Gi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 4
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}
