{{- /*
This function builds some commonly used configuration for Kafka settings based
on either external or Strimzi settings.
*/ -}}
{{- define "kafka.config" -}}
  {{- $strimziConfig := (include "kafka.strimzi.config" . | fromYaml) -}}
  {{- $externalConfig := (include "kafka.external.config" . | fromYaml) -}}
  {{- $kafkaConfig := dict "externalConfig" $externalConfig "strimziConfig" $strimziConfig -}}
  {{- if and $strimziConfig.enabled $externalConfig.enabled -}}
    {{- fail "You cannot enable strimzi and external Kafka together " -}}
  {{- end -}}
  {{- if or $strimziConfig.enabled $externalConfig.enabled -}}
    {{- /* Global Kafka config */ -}}
    {{- $_ := set $kafkaConfig "enabled" "true" -}}

    {{- /* Set default to tls + tls (mTLS) */ -}}
    {{- $kafkaConnectionType := "tls" -}}
    {{- $kafkaAuthenticationType := "tls" -}}
    {{- $kafkaConnectionSecretType := "" -}}
    {{- $kafkaAuthenticationSecretType := "" -}}
    {{- $kafkaBootstrapAddress := "" -}}
    {{- $autoCreateTopics := true -}}
    {{- if $strimziConfig.enabled -}}
      {{- /* Disable publicca by default */ -}}
      {{- $_ := set $kafkaConfig "publicca" false -}}
      {{- $kafkaConnectionType = ($strimziConfig.connection).type -}}
      {{- $kafkaAuthenticationType = ($strimziConfig.authentication).type -}}
      {{- /* Settings for TLS with Strimzi */ -}}
      {{- if eq $kafkaConnectionType "tls" -}}
        {{- /* K8s secret name for Strimzi ca cert */ -}}
        {{- $_ := set $kafkaConfig "caCertSecretName" (printf "%s-cluster-ca-cert" .Release.Name) -}}
        {{- /* Kafka bootstrap servers for Strimzi tls listener */ -}}
        {{- /*TODO: Make the bootstrap address autoconfigure from the Strimzi configuration */ -}}
        {{- $kafkaBootstrapAddress = printf "%s-kafka-bootstrap:9093" .Release.Name -}}
      {{- else -}}
        {{- $kafkaBootstrapAddress = printf "%s-kafka-bootstrap:9093" .Release.Name -}}
      {{- end -}}
      {{- /* Set the K8s secret name for Strimzi user cert */ -}}
      {{- if eq $kafkaAuthenticationType "tls" -}}
        {{- $_ := set $kafkaConfig "userCertSecretName" (printf "%s-kafka-user" .Release.Name) -}}
      {{- end -}}
    {{- else if $externalConfig.enabled -}}
      {{- $kafkaBootstrapAddress = required "Kafka: You must provide `bootstrapAddress`" $externalConfig.connection.bootstrapAddress -}}
      {{- $kafkaConnectionType = ($externalConfig.connection).type -}}
      {{- $kafkaAuthenticationType = ($externalConfig.authentication).type -}}
      {{- $defaultSecretNamePrefix := (printf "%s-kafka" .Release.Name) -}}
      {{- if eq $kafkaConnectionType "tls" -}}
        {{- $caCertType := (default "public" (($externalConfig.connection).caCert).type) -}}
        {{- /* Set the K8s secret name for external Kafka ca cert based on provided `secretName` if any.
            If using `public` this is the only scenario where we enable use of public ca cert for Kafka.
            (i.e. if we are using an external Kafka and do not specify a cert, or explicitly set it to `public`)
            If using `sscsi` and `secretName` is not provided, it uses autogenerated default `<releaseName>-kafka-ca-cert`
            If using `k8sSecret` and `secretName` is not provided, throw an error to the user.
            Default to the `public` behaviour if no caCert is provided */ -}}
        {{- /* Set default value. */ -}}
        {{- $secretName := printf "%s-ca-cert" $defaultSecretNamePrefix -}}
        {{- if eq $caCertType "public" -}}
          {{- $_ := set $kafkaConfig "publicca" true -}}
        {{- else if eq $caCertType "sscsi" -}}
          {{- /* Set based on provided `secretName`. If not provided, leave default value untouched. */ -}}
          {{- if (($externalConfig.connection).caCert).secretName -}}
            {{- $secretName = (($externalConfig.connection).caCert).secretName -}}
          {{- end -}}
          {{- $kafkaAuthenticationSecretType := "" -}}
        {{- else if eq $caCertType "k8sSecret" -}}
          {{- /* Set based on provided `secretName`. If not provided, throw an error to the user. */ -}}
          {{- $secretName = required "Kafka: You must provide `secretName` for CA cert if using `type: k8sSecret`" (($externalConfig.connection).caCert).secretName -}}
        {{- else -}}
          {{- /* Fail as `caCert.type` is set to an unsupported value */ -}}
          {{- fail (printf "Kafka: CA certificate secret of type `%s` is not currently supported.") -}}
        {{- end -}}
        {{- $kafkaConnectionSecretType = $caCertType -}}
        {{- $_ := set $kafkaConfig "caCertSecretName" $secretName -}}
      {{- end -}}
      {{- if eq $kafkaAuthenticationType "tls" -}}
        {{- $userCertType := (default "k8sSecret" (($externalConfig.authentication).userCert).type) -}}
        {{- /* Set the K8s secret name for external Kafka user cert based on provided `secretName` if any.
              If using `sscsi` and `secretName` is not provided, it uses autogenerated default `<releaseName>-kafka-user-cert``
              If using `k8sSecret` and `secretName` is not provided, throw an error to the user.
              Default to the `k8sSecret` behaviour if no userCert is provided */ -}}
        {{- /* Set default value. */ -}}
        {{- $secretName := printf "%s-user-cert" $defaultSecretNamePrefix -}}
        {{- if eq $userCertType "sscsi" -}}
          {{- /* Set based on provided `secretName`. If not provided, leave default value untouched. */ -}}
          {{- if (($externalConfig.authentication).userCert).secretName -}}
            {{- $secretName = (($externalConfig.authentication).userCert).secretName -}}
          {{- end -}}
        {{- else if eq $userCertType "k8sSecret" -}}
          {{- /* Set based on provided `secretName`. If not provided, throw an error to the user. */ -}}
          {{- $secretName = required "Kafka: You must provide `secretName` for user cert if using `type: k8sSecret`" (($externalConfig.authentication).userCert).secretName -}}
        {{- else -}}
          {{- /* Fail as `caCert.type` is set to an unsupported value */ -}}
          {{- fail (printf "Kafka: CA certificate secret of type `%s` is not currently supported.") -}}
        {{- end -}}
        {{- $kafkaAuthenticationSecretType = $userCertType -}}
        {{- $_ := set $kafkaConfig "userCertSecretName" $secretName -}}
      {{- end -}}
    {{- end -}}

    {{- /* Topic management */ -}}
    {{- /* Only supported in Strimzi right now */ -}}
    {{- if and .Values.messageBroker.manageTopics $strimziConfig.enabled -}}
      {{- /* Update the topics to be suitable for the existing Strimzi configuration */ -}}
      {{- range $k, $v := .Values.messageBroker.topics -}}
        {{- $_ := set (get $.Values.messageBroker.topics $k) "replicas" $strimziConfig.kafka.replicas -}}
      {{- end -}}
      {{- $_ := set $kafkaConfig "topics" .Values.messageBroker.topics -}}
      {{- $autoCreateTopics = false -}}
    {{- else -}}
      {{- $_ := set $kafkaConfig "topics" dict -}}
    {{- end -}}

    {{- $_ := set $kafkaConfig "connection" (dict "type" $kafkaConnectionType "secretType" $kafkaConnectionSecretType) -}}
    {{- $_ := set $kafkaConfig "authentication" (dict "type" $kafkaAuthenticationType "secretType" $kafkaAuthenticationSecretType) -}}
    {{- $_ := set $kafkaConfig "bootstrapAddress" $kafkaBootstrapAddress -}}
    {{- $_ := set $kafkaConfig "autoCreateTopics" $autoCreateTopics -}}
  {{- end -}}
  {{- $kafkaConfig | toYaml -}}
{{- end -}}

{{- /*
Define the volumes that will be used to mount Kafka certificates
in to pods
*/ -}}
{{- define "kafka.certificate.volumes" -}}
  {{- $volumes := list -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- /* Mount CA cert if using TLS and private cert */ -}}
  {{- if and (eq $kafkaConfig.connection.type "tls") (not $kafkaConfig.publicca ) -}}
    {{- $secretProjection := (dict "secretName" $kafkaConfig.caCertSecretName) -}}
    {{- $certVolume := dict "name" "kafka-broker-ca-cert" "secret" $secretProjection -}}
    {{- $volumes = append $volumes $certVolume -}}
  {{- end -}}
  {{- /* Mount client cert if using mTLS */ -}}
  {{- if eq $kafkaConfig.authentication.type "tls" -}}
    {{- $secretProjection := (dict "secretName" $kafkaConfig.userCertSecretName) -}}
    {{- $certVolume := dict "name" "kafka-client-cert" "secret" $secretProjection -}}
    {{- $volumes = append $volumes $certVolume -}}
  {{- end -}}
  {{- $volumes | toYaml -}}
{{- end -}}

{{- /*
Define Kafka related volumes requird by Smile CDR pod
*/ -}}
{{- define "kafka.volumes" -}}
  {{- $volumes := list -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- if $kafkaConfig.enabled -}}
    {{- /* Mount client properties files */ -}}
    {{- $consumerPropertiesData := include "kafka.consumer.properties.text" . -}}
    {{- $producerPropertiesData := include "kafka.producer.properties.text" . -}}
    {{- $cmName := printf "%s-kafka-client-properties-%s-node%s" .Release.Name (include "smilecdr.nodeId" . | lower) (include "smilecdr.getConfigMapNameHashSuffix" (dict "Values" .Values "data" (printf "%s/n%s" $consumerPropertiesData $producerPropertiesData))) -}}
    {{- $configMap := (dict "name" $cmName) -}}
    {{- $propsVolume := dict "name" "kafka-client-config" "configMap" $configMap -}}
    {{- $volumes = append $volumes $propsVolume -}}
    {{- $volumes = concat $volumes (include "kafka.certificate.volumes" . | fromYamlArray) -}}
  {{- end -}}
  {{- $volumes | toYaml -}}
{{- end -}}

{{- /*
Define the volume mounts that will be used to mount Kafka certificates
in to pods
*/ -}}
{{- define "kafka.certificate.volumeMounts" -}}
  {{- $volumeMounts := list -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- /* Mount CA cert if using TLS and private cert */ -}}
  {{- if and (eq $kafkaConfig.connection.type "tls") (not $kafkaConfig.publicca ) -}}
    {{- $volumeMount := dict "name" "kafka-broker-ca-cert" -}}
    {{- $_ := set $volumeMount "mountPath" "/home/smile/smilecdr/classes/client_certificates/kafka-ca-cert.p12" -}}
    {{- $_ := set $volumeMount "subPath" "ca.p12" -}}
    {{- $_ := set $volumeMount "readOnly" true -}}
    {{- $volumeMounts = append $volumeMounts $volumeMount -}}
  {{- end -}}
  {{- /* Mount client cert if using mTLS */ -}}
  {{- if eq $kafkaConfig.authentication.type "tls" -}}
    {{- $volumeMount := dict "name" "kafka-client-cert" -}}
    {{- $_ := set $volumeMount "mountPath" "/home/smile/smilecdr/classes/client_certificates/kafka-client-cert.p12" -}}
    {{- $_ := set $volumeMount "subPath" "user.p12" -}}
    {{- $_ := set $volumeMount "readOnly" true -}}
    {{- $volumeMounts = append $volumeMounts $volumeMount -}}
  {{- end -}}
  {{- $volumeMounts | toYaml -}}
{{- end -}}

{{- /*
Define Kafka related volume mounts requird by Smile CDR container
*/ -}}
{{- define "kafka.volumeMounts" -}}
  {{- $volumeMounts := list -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- if $kafkaConfig.enabled -}}
    {{- /* Mount consumer properties file */ -}}
    {{- $volumeMount := dict "name" "kafka-client-config" -}}
    {{- $_ := set $volumeMount "mountPath" "/home/smile/smilecdr/classes/cdr_kafka_config/cdr-kafka-consumer-config.properties" -}}
    {{- $_ := set $volumeMount "subPath" "consumer.properties" -}}
    {{- $_ := set $volumeMount "readOnly" true -}}
    {{- $volumeMounts = append $volumeMounts $volumeMount -}}
    {{- /* Mount producer properties file */ -}}
    {{- $volumeMount = dict "name" "kafka-client-config" -}}
    {{- $_ := set $volumeMount "mountPath" "/home/smile/smilecdr/classes/cdr_kafka_config/cdr-kafka-producer-config.properties" -}}
    {{- $_ := set $volumeMount "subPath" "producer.properties" -}}
    {{- $_ := set $volumeMount "readOnly" true -}}
    {{- $volumeMounts = append $volumeMounts $volumeMount -}}
    {{- $volumeMounts = concat $volumeMounts (include "kafka.certificate.volumeMounts" . | fromYamlArray) -}}
  {{- end -}}
  {{- $volumeMounts | toYaml -}}
{{- end -}}

{{- /*
Define env vars that will be used for Kafka certificate
passwords
*/ -}}
{{- define "kafka.envVars" -}}
  {{- $envVars := list -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- if $kafkaConfig.enabled -}}
    {{- /* Global Env vars */ -}}
    {{- $envVars = append $envVars (dict "name" "KAFKA_BOOTSTRAP_ADDRESS" "value" $kafkaConfig.bootstrapAddress) -}}
    {{- /* Env vars if using TLS and private cert */ -}}
    {{- if eq $kafkaConfig.connection.type "tls" -}}
      {{- $envVars = append $envVars (dict "name" "KAFKA_SSL_ENABLED" "value" "true") -}}
      {{- if not $kafkaConfig.publicca -}}
        {{- $env := dict "name" "KAFKA_BROKER_CA_CERT_PWD" -}}
        {{- $_ := set $env "valueFrom" (dict "secretKeyRef" (dict "name" $kafkaConfig.caCertSecretName "key" "ca.password")) -}}
        {{- $envVars = append $envVars $env -}}
      {{- end -}}
    {{- else -}}
      {{- $envVars = append $envVars (dict "name" "KAFKA_SSL_ENABLED" "value" "false") -}}
    {{- end -}}
    {{- /* Env vars if using mTLS */ -}}
    {{- if eq $kafkaConfig.authentication.type "tls" -}}
      {{- $env := dict "name" "KAFKA_CLIENT_CERT_PWD" -}}
      {{- $_ := set $env "valueFrom" (dict "secretKeyRef" (dict "name" $kafkaConfig.userCertSecretName "key" "user.password")) -}}
      {{- $envVars = append $envVars $env -}}
    {{- end -}}
  {{- end -}}
  {{- $envVars | toYaml -}}
{{- end -}}

{{/*
Define any file copies required by Kafka
*/}}
{{ define "kafka.customerlib.sources" }}

  {{- $customerlibFileSources := list -}}

  {{- /* Add Kafka MSK IAM Jar, only if auth type is set to `iam` */ -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- if and $kafkaConfig.enabled (eq $kafkaConfig.authentication.type "iam") -}}
    {{- /* The enablement, filename and URL can be overriden if required.
           Set `disableAutoJarCopy` to true to disable copying this file. This will break
           IAM auth unless you add the file using `copyFIles`.
           This is an undocumented feature - if different files need to be added,
           the user should use the existing `copyFiles` feature instead. This override
           should only be used if troubleshooting this feature. */ -}}
    {{- if not ($kafkaConfig.authentication).disableAutoJarCopy -}}
      {{- $fileName := default "aws-msk-iam-auth-1.1.6-all.jar" ($kafkaConfig.authentication).authJarName -}}
      {{- $url := default "https://github.com/aws/aws-msk-iam-auth/releases/download/v1.1.6/aws-msk-iam-auth-1.1.6-all.jar" ($kafkaConfig.authentication).authJarUrl -}}
      {{- $awsMskIamJarSource := dict "type" "curl" "url" $url "fileName" $fileName -}}
      {{- $customerlibFileSources = append $customerlibFileSources $awsMskIamJarSource -}}
    {{- end -}}
  {{- end -}}
  {{- $customerlibFileSources | toYaml  -}}
{{- end -}}

{{- /*
Define Kafka consumer properties file
*/ -}}
{{- define "kafka.consumer.properties.text" -}}
  {{- $props := "# Kafka consumer properties auto generated from Helm Chart. Do not edit manually!\n" -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- if $kafkaConfig.enabled -}}
    {{- range $k, $v := .Values.messageBroker.clientConfiguration.consumerProperties -}}
      {{- $props = printf "%s\n%s=%d" $props $k (int $v) -}}
    {{- end -}}
    {{- if eq $kafkaConfig.authentication.type "iam" -}}
      {{- $props = printf "%s\n%s=%s" $props "sasl.mechanism" "AWS_MSK_IAM" -}}
      {{- $props = printf "%s\n%s=%s" $props "sasl.jaas.config" "software.amazon.msk.auth.iam.IAMLoginModule required;" -}}
      {{- $props = printf "%s\n%s=%s" $props "sasl.client.callback.handler.class" "software.amazon.msk.auth.iam.IAMClientCallbackHandler" -}}
    {{- end -}}
  {{- end -}}
  {{- $props -}}
{{- end -}}

{{- /*
Define Kafka producer properties file
*/ -}}
{{- define "kafka.producer.properties.text" -}}
  {{- $props := "# Kafka producer properties auto generated from Helm Chart. Do not edit manually!\n" -}}
  {{- $kafkaConfig := (include "kafka.config" . | fromYaml) -}}
  {{- if $kafkaConfig.enabled -}}
    {{- range $k, $v := .Values.messageBroker.clientConfiguration.producerProperties -}}
      {{- $props = printf "%s\n%s=%d" $props $k (int $v) -}}
    {{- end -}}
    {{- if eq $kafkaConfig.authentication.type "iam" -}}
      {{- $props = printf "%s\n%s=%s" $props "sasl.mechanism" "AWS_MSK_IAM" -}}
      {{- $props = printf "%s\n%s=%s" $props "sasl.jaas.config" "software.amazon.msk.auth.iam.IAMLoginModule required;" -}}
      {{- $props = printf "%s\n%s=%s" $props "sasl.client.callback.handler.class" "software.amazon.msk.auth.iam.IAMClientCallbackHandler" -}}
    {{- end -}}
  {{- end -}}
  {{- $props -}}
{{- end -}}
