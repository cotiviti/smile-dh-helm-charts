{{- /* Use the nodes helper template that defines everything for a single CDR Node */ -}}
{{- range $theCdrNodeName, $theCdrNodeCtx := include "smilecdr.cdrNodes" . | fromYaml -}}
  {{- $theCdrNodeSpec := $theCdrNodeCtx.Values -}}
  {{- range $theCertificateName, $theCertificate := $theCdrNodeSpec.certificates -}}
    {{- /* Determine how to pass in the keystore secret*/ -}}
    {{- $keystorePasswordConfig := default (dict) $theCertificate.keystorePassword -}}

    {{- if and $theCertificate.enabled (($theCertificate.spec.keystores).pkcs12).create -}}
      {{- if and (hasKey $keystorePasswordConfig "useSecret") (not $keystorePasswordConfig.useSecret) -}}
        {{- /* Secret is disabled - Currently not supported */ -}}
        {{- fail "Disabling secret for cert-manager generated keystores is not currently supported. " -}}
      {{- else -}}
        {{- $secretRef := default (printf "%s-tls-keystorepass" $theCertificateName) $keystorePasswordConfig.secretRef -}}
        {{- $secretKey := default "password" $keystorePasswordConfig.secretKey -}}
        {{- $encodedValue := b64enc (default "changeit" $keystorePasswordConfig.valueOverride) -}}
        {{- $secretData := dict "data" (dict $secretKey $encodedValue) -}}
apiVersion: v1
kind: Secret
metadata:
  name: {{ $secretRef }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{ include "smilecdr.labels" $ | nindent 4 | trim }}
type: Opaque
{{ $secretData | toYaml }}
---
      {{- end }}
    {{- end }}
  {{- end }}
{{- end }}
