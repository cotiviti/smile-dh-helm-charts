{{- if (include "observability.otelcoll" . | fromYaml).crdEnabled -}}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ .Release.Name }}-scdr-otelcoll
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "smilecdr.labels" $ | nindent 4 }}
  annotations: {}
spec:
  config: {{ .Values.observability.instrumentation.openTelemetry.otelCollector.config | toYaml | indent 2 }}
  # Using 'contrib' image as it has the required Loki exporter that is not in the 'core' distribution.
  # https://github.com/open-telemetry/opentelemetry-collector-releases/pkgs/container/opentelemetry-collector-releases%2Fopentelemetry-collector-contrib
  image: "ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.79.0"
  ingress:
    route: {}
  ports:
  - port: 9090
    name: otc-export
  mode: {{ .Values.observability.instrumentation.openTelemetry.otelCollector.mode }}
  replicas: 1
  resources: {}
  targetAllocator:
    prometheusCR: {}
    resources: {}
  upgradeStrategy: automatic
{{- end -}}
{{- /* Disabling the below for now, as there is no point in using the otel collector sidecar.
    Crunchy PGO already has an exporter that can be scraped.
    Maybe switch to the OTC sidecar when using OTLP/grpc for sending metrics to Prometheus */ -}}
{{- if and (include "observability.otelcoll" . | fromYaml).crdEnabled false -}}
---
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: {{ .Release.Name }}-pg-otelcoll
  namespace: {{ .Release.Namespace }}
  labels:
    {{- include "smilecdr.labels" $ | nindent 4 }}
  annotations: {}
spec:
  config: |
          receivers:
            otlp:
              protocols:
                grpc:
            # Collect prometheus metrics
            prometheus:
              config:
                scrape_configs:
                - job_name: 'crunchy-postgres'
                  scrape_interval: 10s
                  static_configs:
                  - targets: ['localhost:9187/metrics']
                  metrics_path: '/metrics'

          # processors:
          #   filter:
          #     metrics:
          #       # Temporary to fix bug until https://github.com/open-telemetry/opentelemetry-collector-contrib/issues/18194 is fixed
          #       exclude:
          #         match_type: strict
          #         metric_names:
          #           - queueSize
          #           - queueSize_ratio
          exporters:
            otlp/metrics:
              endpoint: http://prometheus-operated:9090
              tls:
                insecure: true
            # prometheus:
            #   endpoint: 0.0.0.0:9090
            #   send_timestamps: true
            #   metric_expiration: 180m
            #   resource_to_telemetry_conversion:
            #     enabled: true
          service:
            pipelines:
              metrics:
                receivers: [otlp,prometheus]
                processors: []
                exporters: [otlp]
  # Using 'contrib' image as it has the required Loki exporter that is not in the 'core' distribution.
  # https://github.com/open-telemetry/opentelemetry-collector-releases/pkgs/container/opentelemetry-collector-releases%2Fopentelemetry-collector-contrib
  image: "ghcr.io/open-telemetry/opentelemetry-collector-releases/opentelemetry-collector-contrib:0.79.0"
  ingress:
    route: {}
  ports:
  - port: 9090
    name: otc-export
  mode: {{ .Values.observability.instrumentation.openTelemetry.otelCollector.mode }}
  replicas: 1
  resources: {}
  targetAllocator:
    prometheusCR: {}
    resources: {}
  upgradeStrategy: automatic
{{- end -}}
