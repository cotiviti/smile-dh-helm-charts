{{- /* Startup Probe may need to be configurable in cases where a Smile CDR configuration takes
    longer than the default settings of 5 mins.
    There are also scenarios where the startup probe may be disabled for troubleshooting purposes.
*/ -}}
{{- define "smilecdr.startupProbe" -}}
  {{- $probeSpec := dict -}}
  {{- /* We could potentially check for known settings that cause slow startup.
      For now, we will just allow simple override.
      TODO: Add calculated defaults based on slow starting modules
      (e.g persistence with `auto_create_placeholder_reference_targets` enabled) */ -}}
  {{- $_ := set $probeSpec "failureThreshold" (default 30 ($.Values.startupProbe).failureThreshold) -}}
  {{- $_ := set $probeSpec "periodSeconds" (default 10 ($.Values.startupProbe).periodSeconds) -}}

  {{- /* We don't need to set this if not overridden. It will use the default (1) */ -}}
  {{- with ($.Values.startupProbe).successThreshold -}}
    {{- $_ := set $probeSpec "successThreshold" . -}}
  {{- end -}}
  {{- /* We don't need to set this if not overridden. It will use the default (1) */ -}}
  {{- with ($.Values.startupProbe).timeoutSeconds -}}
    {{- $_ := set $probeSpec "timeoutSeconds" . -}}
  {{- end -}}

  {{- $startupMessage := "Smile, we're up and running! :)" -}}
  {{- $probeCommand := list "/bin/sh" "-c" (printf "/bin/grep %s /home/smile/smilecdr/log/smile.log" (quote $startupMessage)) -}}
  {{- $_ := set $probeSpec "exec" (dict "command" $probeCommand) -}}

  {{- $probeSpec | toYaml -}}
{{- end -}}

{{- /* Startup Probe may need to be configurable in cases where a Smile CDR configuration takes
    longer than the default settings of 5 mins.
    There are also scenarios where the startup probe may be disabled for troubleshooting purposes.
*/ -}}
{{- define "smilecdr.livenessProbe" -}}
  {{- $ctx := get . "Values" -}}
  {{- $probeSpec := dict -}}
  {{- /* Allow configuring of liveness probe */ -}}
  {{- /* Currently does no auto configuration and is not generated by default */ -}}
  {{- /* initialDelaySeconds periodSeconds timeoutSeconds failureThreshold successThreshold future: terminationGracePeriodSeconds*/ -}}
  {{- with $ctx.livenessProbe -}}
    {{- /* As we do not use livenessProbe by default, we need to make sure the provided value has one `Action` defined.
        One of `exec`, `httpGet`, `tcpSocket` or `grpc`. See: https://kubernetes.io/docs/reference/kubernetes-api/workload-resources/pod-v1/#Probe */ -}}
    {{- $hasAction := false -}}
    {{- range $theKeyName := (keys $ctx.livenessProbe) -}}
      {{- if contains $theKeyName "exec httpGet tcpSocket grpc" -}}
        {{- if $hasAction -}}
          {{- /* Fail here as you should only have a single action. */ -}}
          {{- fail (printf "LivenessProbe: You can only define a single action from `exec`, `httpGet`, `tcpSocket` or `grpc`") -}}
        {{- else -}}
          {{- $hasAction = true -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}

    {{- if $hasAction -}}
      {{- $probeSpec = . -}}
    {{- else -}}
      {{- fail (printf "LivenessProbe: You must provide a liveness probe action from `exec`, `httpGet`, `tcpSocket` or `grpc`") -}}
    {{- end -}}
  {{- end -}}

  {{- $probeSpec | toYaml -}}
{{- end -}}

{{- /* Readiness Probe
    Only configure readiness probe for a single module that has readiness probe enabled.
    This should be defined in the appropriate module definition using `enableReadinessProbe: true`
    There are also scenarios where the startup probe may be disabled for troubleshooting purposes.
*/ -}}
{{- define "smilecdr.readinessProbe" -}}
  {{- $ctx := get . "Values" -}}
  {{- $probeSpec := dict -}}

  {{- /* Get list of modules with readiness probe
      This can be done with the `services` object that was rendered
      as it already includes any readiness probe details */ -}}
  {{- $servicesWithReadinessProbe := list -}}
  {{- range $theServiceName, $theServiceSpec := $ctx.services -}}
    {{- /* If service has readiness probe enabled. */ -}}
    {{- if $theServiceSpec.enableReadinessProbe -}}
      {{- $servicesWithReadinessProbe = append $servicesWithReadinessProbe $theServiceSpec -}}
    {{- end -}}
  {{- end -}}

  {{- /* Validate that readiness probe is only enabled for exactly one endpoint. */ -}}
  {{- if eq (len $servicesWithReadinessProbe) 0 -}}
    {{- fail "You must define one readiness probe per node. Review your module configuration and ensure an enabled module with an enabled service has `enableReadinessProbe` set to true" -}}
  {{- else if gt (len $servicesWithReadinessProbe) 1 -}}
    {{- fail "You can only define one readiness probe per node. Review your module configuration and ensure only one module has `enableReadinessProbe` set to true" -}}
  {{- else -}}
    {{- /* Validation passed. Generate readiness probe */ -}}
    {{- $_ := set $probeSpec "failureThreshold" (default 2 ($ctx.readinessProbe).failureThreshold) -}}
    {{- $_ := set $probeSpec "timeoutSeconds" (default 10 ($ctx.readinessProbe).timeoutSeconds) -}}
    {{- $_ := set $probeSpec "periodSeconds" (default 10 ($ctx.readinessProbe).periodSeconds) -}}
    {{- with ($ctx.startupProbe).successThreshold -}}
      {{- $_ := set $probeSpec "successThreshold" . -}}
    {{- end -}}

    {{- $theServiceSpec := index $servicesWithReadinessProbe 0 -}}
    {{- $httpGetSpec := dict -}}
    {{- $_ := set $httpGetSpec "path" $theServiceSpec.healthcheckPath -}}
    {{- $_ := set $httpGetSpec "port" $theServiceSpec.port -}}
    {{- $_ := set $probeSpec "httpGet" $httpGetSpec -}}
  {{- end -}}

  {{- $probeSpec | toYaml -}}
{{- end -}}

{{/*
Define Smile CDR environment variables

Note:
This template simply collates the environment variables defined elsewhere to
provide a single entry point.
*/}}
{{- define "smilecdr.envVars" -}}
  {{- $envVars := list -}}
  {{- /* Include DB env vars */ -}}
  {{- $envVars = concat $envVars (include "smilecdr.dbEnvVars" . | fromYamlArray ) -}}
  {{- /* Include kafka env vars - This is for connection configuration key store passwords */ -}}
  {{- $envVars = concat $envVars (include "kafka.envVars" . | fromYamlArray ) -}}
  {{- /* Include Remote ActiveMQ env vars - This is for the address, user & password */ -}}
  {{- $envVars = concat $envVars (include "messagebroker.amq.envVars" . | fromYamlArray ) -}}
  {{- /* Include observability env vars - This is for Java agent injection etc */ -}}
  {{- $envVars = concat $envVars (include "observability.envVars" . | fromYamlArray ) -}}
  {{- /* Include global extra env vars */ -}}
  {{- $envVars = concat $envVars .Values.extraEnvVars -}}
  {{- /* Include JVM settings */ -}}
  {{- with (include "smilecdr.jvmargs" . ) -}}
    {{- $envVars = append $envVars (dict "name" "JVMARGS" "value" .) -}}
  {{- end -}}
  {{- $envVars | toYaml -}}
{{- end -}}

{{/*
Define all init containers

Note:
This template simply collates the init containers defined elsewhere to
provide a single entry point.
*/}}
{{- define "smilecdr.initContainers" -}}
  {{- $initContainers := list -}}

  {{- /* Special handling is required for using `concat` on lists that could remain empty.
      This is due to an unresolved bug in the sprig library: https://github.com/helm/helm/issues/10699
      If you `concat` multiple lists, the `toYaml` function will ultimately convert it to `null`
      instead of `[]`, causing linting errors.  */ -}}

  {{- with (include "smilecdr.initFileContainers" . | fromYamlArray ) -}}
    {{- $initContainers = concat $initContainers . -}}
  {{- end -}}
  {{- /* Uncomment once migration containers (i.e. Zero Outage Upgrades) are implemented */ -}}
  {{- /* $initContainers = append $initContainers (include "smilecdr.initMigrateContainers" . | fromYaml ) */ -}}
  {{- toYaml $initContainers -}}
{{- end -}}

{{/*
Define Deployment annotations
This combines all Deployment annotations into a single list
*/}}
{{- define "smilecdr.annotations.deployment" -}}
  {{- $annotations := ( include "observability.annotations.deployment" . | fromYaml) -}}
  {{- with .Values.deploymentAnnotations -}}
    {{- $annotations = merge . $annotations -}}
  {{- end -}}
  {{- /* TODO: Find a more elegant way to fix the quoting here */ -}}
  {{- if gt (len $annotations ) 0 -}}
    {{- range $k, $v := $annotations -}}
      {{- printf "%s: %v\n" $k ($v | quote) -}}
    {{- end -}}
  {{- else -}}
    {{- printf "{}" -}}
  {{- end -}}
  {{- /* Ensure all annotation values are quoted correctly */ -}}
  {{- /* range $k, $v := $annotations -}}
    {{- $_ := set $annotations $k (printf "%v" $v) -}}
  {{- end -}}
  {{- $annotations | toYaml */ -}}
{{- end -}}

{{/*
Define Pod annotations
This combines all Pod annotations into a single list
*/}}
{{- define "smilecdr.annotations.pod" -}}
  {{- $annotations := ( include "observability.annotations.pod" . | fromYaml) -}}
  {{- with .Values.podAnnotations -}}
    {{- $annotations = merge . $annotations -}}
  {{- end -}}
  {{- /* TODO: Find a more elegant way to fix the quoting here */ -}}
  {{- if gt (len $annotations ) 0 -}}
    {{- range $k, $v := $annotations -}}
      {{- printf "%s: %v\n" $k ($v | quote) -}}
    {{- end -}}
  {{- else -}}
    {{- printf "{}" -}}
  {{- end -}}
  {{- /* Ensure all annotation values are quoted correctly */ -}}
  {{- /* range $k, $v := $annotations -}}
    {{- $_ := set $annotations $k (printf "%v" $v) -}}
  {{- end -}}
  {{- $annotations | toYaml */ -}}
{{- end -}}

{{/*
Generate Helm Chart Warnings

Use this for generating deprecation notices and other warnings about the configuration being used.
*/}}
{{- define "chartWarnings" -}}
  {{- $warningMessage := "" -}}

  {{- /* Ingress config warnings */ -}}
  {{- if hasKey .Values "ingress" -}}
    {{- $warningMessage = printf "%s\n\nDEPRECATED: `values.ingress`" $warningMessage -}}
    {{- $warningMessage = printf "%s\n            The use of `values.ingress` has been deprecated. Support for this will be" $warningMessage -}}
    {{- $warningMessage = printf "%s\n            removed in a future version of the Helm Chart. Please use `values.ingresses` instead." $warningMessage -}}
    {{- $warningMessage = printf "%s\n            Refer to the docs for more info on how to configure ingress." $warningMessage -}}
  {{- end -}}

  {{- $defaultIngress := false -}}
  {{- $cdrNodes := include "smilecdr.nodes" . | fromYaml  -}}
  {{- $ingresses := include "smilecdr.ingresses" . | fromYaml -}}
  {{- range $theIngressName, $theIngressSpec := $ingresses -}}
    {{- if $theIngressSpec.defaultIngress  -}}
      {{- $defaultIngress = true -}}
    {{- end -}}

    {{- $ingressRules := (include "smilecdr.ingress.rules" (dict "ingressSpec" $theIngressSpec "cdrNodes" $cdrNodes) | fromYamlArray) -}}
    {{- if eq (len $ingressRules) 0 -}}
      {{- $warningMessage = (printf "%s\n\nWARNING: Ingress `%s` does not have any rules so will not be created." $warningMessage $theIngressName) -}}
      {{- $warningMessage = (printf "%s\n         Perhaps you forgot to specify this ingress in a module definition." $warningMessage) -}}
      {{- $warningMessage = (printf "%s\n         Consider setting `modules.<modulename>.service.ingresses.%s.enabled: true` on any modules that need to use this ingress." $warningMessage $theIngressName) -}}
    {{- end -}}

  {{- end -}}
  {{- if eq (len $ingresses) 0 -}}
    {{- $warningMessage = (printf "%s\n\nnWARNING: You have not enabled any ingresses." $warningMessage) -}}
    {{- $warningMessage = (printf "%s\n          Smile CDR will not be accessible via ingress unless you configure one." $warningMessage) -}}
  {{- end -}}
  {{- if not $defaultIngress -}}
    {{- $warningMessage = (printf "%s\n\nWARNING: You have not defined a default ingress." $warningMessage) -}}
    {{- $warningMessage = (printf "%s\n         Modules with endpoints will not be accessible via ingress unless you specify which ingress they should use." $warningMessage) -}}
    {{- $warningMessage = (printf "%s\n         Consider setting `modules.<modulename>.service.ingresses.<ingressname>.enabled: true` on any modules that need to be accessed from outside the Kubernetes cluster." $warningMessage) -}}
  {{- end -}}

  {{- /* Check to see if files are defined in `mappedFiles` but not passed in to Helm with `--set-file` */ -}}
  {{- $unmappedFiles := list -}}
  {{- range $kMappedFile, $vMappedFile := $.Values.mappedFiles -}}
    {{- if and (not (hasKey $vMappedFile "data")) (not (hasKey $vMappedFile "suppressError")) -}}
      {{- $escapeWarning := "" -}}
      {{- if contains "." $kMappedFile -}}
        {{- $escapeWarning = printf "\nEnsure that you have the correct escaping for the period in the file name.\nIf calling from some other script, you may need to use a double backslash like so:\n\n`--set-file mappedFiles.%s.data=</path/to/file>`" (replace "." "\\\\." $kMappedFile) -}}
      {{- end -}}
      {{- fail (printf "\n\nYou have defined `%s` in `.Values.mappedFiles`, but you did not pass it in to Helm using `--set-file mappedFiles.%s.data=</path/to/%s>`.%s\n" $kMappedFile (replace "." "\\." $kMappedFile) $kMappedFile $escapeWarning) -}}
      {{- $unmappedFiles = append $unmappedFiles $kMappedFile -}}
    {{- end -}}
  {{- end -}}
  {{- if gt (len $unmappedFiles) 0 -}}
    {{- $warningMessage = printf "%s\n\nWARNING: You have defined the following files in `.Values.mappedFiles`," $warningMessage -}}
    {{- $warningMessage = printf "%s\n but you did not pass them in to Helm using `--set-file`:" $warningMessage -}}
    {{- range $file := $unmappedFiles -}}
      {{- $warningMessage = printf "%s\n * %s" $warningMessage $file -}}
    {{- end -}}
  {{- end -}}
  {{- /* Check for using unsupported database propertysource mode */ -}}
  {{- range $theNodeName, $theNodeCtx := include "smilecdr.nodes" . | fromYaml -}}
    {{- $theNodeSpec := $theNodeCtx.Values -}}
    {{- if ($theNodeSpec.config).database -}}
      {{- $warningMessage = printf "%s\n\nWARNING: `config.database` is enabled for Smile CDR node: %s" $warningMessage $theNodeName -}}
      {{- $warningMessage = printf "%s\n         This mode is unsupported and not recommended for use when deploying using Helm" $warningMessage -}}
      {{- $warningMessage = printf "%s\n         Possible side effects that you may encounter with this mode enabled are:" $warningMessage -}}
      {{- $warningMessage = printf "%s\n        * If modules are added or altered in the console, the environment will" $warningMessage -}}
      {{- $warningMessage = printf "%s\n          be in a state of drift compared to the Helm Chart values." $warningMessage -}}
      {{- $warningMessage = printf "%s\n        * It will not be possible to update certain module configurations that" $warningMessage -}}
      {{- $warningMessage = printf "%s\n          affect the supporting infrastructure (i.e. context roots, ports, databases)" $warningMessage -}}
      {{- $warningMessage = printf "%s\n        * In the event of drift occurring, reverting this mode to `disabled` may then " $warningMessage -}}
      {{- $warningMessage = printf "%s\n          lead to unpredictable behaviour that could result in modules being " $warningMessage -}}
      {{- $warningMessage = printf "%s\n          incorrectly configured, resulting to critical system faults." $warningMessage -}}
    {{- end -}}

    {{- if $theNodeSpec.oldResourceNaming -}}
      {{- $warningMessage = printf "%s\n\nDEPRECATED: The `oldResourceNaming` setting has been configured for backwards compatibility." $warningMessage  -}}
      {{- $warningMessage = printf "%s\n            This mode is a temporary feature to allow a controlled migration to chart version `1.0.0-pre.93` and newer." $warningMessage -}}
      {{- $warningMessage = printf "%s\n            This will be removed in a future version so it's recommended to disable this feature and allow the" $warningMessage -}}
      {{- $warningMessage = printf "%s\n            chart to generate your resources using updated names." $warningMessage -}}
      {{- $warningMessage = printf "%s\n            This is a required step in order to use the `multi-node` configurations." $warningMessage -}}
      {{- $warningMessage = printf "%s\n            You will not be able to configure Smile CDR with such a `multi-node` configuration unless this setting is" $warningMessage -}}
      {{- $warningMessage = printf "%s\n            first disabled." $warningMessage -}}
    {{- end -}}
  {{- end -}}
  {{- /* Check for using old image pull credentials */ -}}
  {{- if hasKey .Values.image "credentials" -}}
    {{- $warningMessage = printf "%s\n\nDEPRECATED: `image.credentials`" $warningMessage -}}
    {{- $warningMessage = printf "%s\n            The use of `image.credentials` has been deprecated. Support for this will be" $warningMessage -}}
    {{- $warningMessage = printf "%s\n            removed in a future version of the Helm Chart. Please use `image.pullSecrets` instead." $warningMessage -}}
    {{- $warningMessage = printf "%s\n            Refer to the docs for more info on how to configure image pull secrets." $warningMessage -}}
  {{- end -}}
  {{- /* Check for module mis-configurations. */ -}}
  {{- $modules := include "smilecdr.modules" . | fromYaml -}}
  {{- range $k, $v := $modules -}}
    {{- $moduleConfig := $v.config -}}
    {{- /* Check for using `base_url.fixed` in unsupported fashion. */ -}}
    {{- if and (hasKey $moduleConfig "base_url.fixed") (eq (get $moduleConfig "base_url.fixed") "localhost") -}}
      {{- $warningMessage = printf "%s\n\nWARNING: `base_url.fixed` is set to `localhost` in %s module." $warningMessage $k -}}
      {{- $warningMessage = printf "%s\n         When overriding `base_url.fixed` to this value, the `Location`" $warningMessage -}}
      {{- $warningMessage = printf "%s\n         header and any embedded links will only work when being accessed" $warningMessage -}}
      {{- $warningMessage = printf "%s\n         from the same pod. If you are doing this to use the FHIR Gateway" $warningMessage -}}
      {{- $warningMessage = printf "%s\n         module, you will not be able to take advantage of 'fanning out' to" $warningMessage -}}
      {{- $warningMessage = printf "%s\n         use multiple pods. It's suggested to unset `base_url.fixed` in your" $warningMessage -}}
      {{- $warningMessage = printf "%s\n         values file and allow the Helm Chart to configure it automatically." $warningMessage -}}
    {{- end -}}
  {{- end -}}
  {{- /* If there are any warnings, output them with a nice header. */ -}}
  {{- if ne (len $warningMessage) 0 -}}
    {{- $warningMessage = printf "\n***************************%s" $warningMessage -}}
    {{- $warningMessage = printf "\n*** HELM CHART WARNINGS ***%s" $warningMessage -}}
    {{- $warningMessage = printf "\n***************************%s" $warningMessage -}}
    {{- $warningMessage -}}
  {{- end -}}
{{- end -}}
