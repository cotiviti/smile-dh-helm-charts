{{- /* Use the nodes helper template that defines everything for a single CDR Node */ -}}
{{- range $theNodeName, $theNodeCtx := include "smilecdr.nodes" . | fromYaml -}}
  {{- $theNodeSpec := $theNodeCtx.Values -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ $.Release.Name }}-{{ $theNodeSpec.resourceSuffix }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- toYaml $theNodeSpec.cdrNodeLabels | nindent 4 }}
  {{- with $theNodeSpec.deploymentAnnotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  {{- if not ($theNodeSpec.autoscaling).enabled }}
  replicas: {{ $theNodeSpec.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
    {{- toYaml $theNodeSpec.cdrNodeSelectorLabels | nindent 6 }}
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      {{- with $theNodeSpec.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- toYaml $theNodeSpec.cdrNodeLabels | nindent 8 }}
    spec:
      imagePullSecrets:
        {{- toYaml $theNodeSpec.imagePullSecretsList | nindent 8 }}
      serviceAccountName: {{ toYaml $theNodeSpec.serviceAccountName }}
      securityContext:
        {{- toYaml $theNodeSpec.podSecurityContext | nindent 8 }}
      initContainers:
        {{- toYaml $theNodeSpec.initContainers | nindent 8 }}
      terminationGracePeriodSeconds: 60
      containers:
        - name: smilecdr
          securityContext:
            {{- toYaml $theNodeSpec.securityContext | nindent 12 }}
          {{- $image := printf "%s:%s" $theNodeSpec.image.repository (default $.Chart.AppVersion $theNodeSpec.image.tag) }}
          image: {{ quote $image }}
          imagePullPolicy: {{ $theNodeSpec.image.pullPolicy }}
          readinessProbe:
            {{- toYaml $theNodeSpec.readinessProbe | nindent 12 }}
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "30"]
          startupProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - "/bin/grep \"Smile, we're up and running! :)\" /home/smile/smilecdr/log/smile.log"
            failureThreshold: 30
            periodSeconds: 10
          resources:
            {{- toYaml $theNodeSpec.resources | nindent 12 }}
          env:
            {{- toYaml $theNodeSpec.envVars | nindent 12 }}
          ports:
            {{- range $k, $v := $theNodeSpec.services }}
            - name: {{ $v.svcName }}
              containerPort: {{ $v.port }}
              protocol: TCP
            {{- end }}
            {{- if (include "observability.promagent" $theNodeCtx | fromYaml).enabled -}}
            - name: prom-metrics
              containerPort: {{ (include "observability.promagent" $theNodeCtx | fromYaml).port }}
              protocol: TCP
            {{- end }}
          volumeMounts:
            {{ toYaml $theNodeSpec.volumeMounts | nindent 12 | trim }}
      volumes:
        {{ toYaml $theNodeSpec.volumes | nindent 8 | trim }}
      restartPolicy: Always
---
{{ end }}
