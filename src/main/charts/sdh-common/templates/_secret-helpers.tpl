{{- /*
Helper functions to help with secret handling

These charts support secrets being provided to containers using two methods
1. Using K8s Secret objects
2. Using the K8s Secrets Store CSI driver

K8s Secrets
If using K8s secrets, they can be created externally to this chart, or they can be created
by this chart using overridden values. The latter method is only intended as a quick-start
method and should only be used outside of initial testing.

K8s Secrets Store CSI driver
If using the CSI driver, you need to ensure the CSI driver and appropriate provider are
installed in the cluster. Then specify sscsi as the type.

*/ -}}

{{- /*
Create list of image pull secrets to use.
Sets up default parameters so this can easily
be used elsewhere in the chart
This can be called with default 'global' context or called
within a 'component' context.
In the former case, there should be a `.Values`
*/ -}}
{{- define "sdhCommon.imagePullSecrets" -}}
  {{- /* We will have 'global' imagePullSecrets as well as 'per component' e.g CDR nodes or Member Portal components */ -}}
  {{- $imagePullSecrets := list -}}
  {{- $chartShortName := .Values.shortName -}}
  {{- $imagePullSecretsValues := default list ((.Values).image).imagePullSecrets -}}
  {{- $ctx := . -}}
  {{- range $i, $v := $imagePullSecretsValues -}}
    {{- /* This is the default autogenerated secret name */ -}}
    {{- $secretName := printf "%s-%s-image-pull-secrets" $ctx.Release.Name $chartShortName -}}
    {{- /* It needs to be different for each component in case multiple components try to
        sync to the same k8s secret resource (Bad). So we rename it if we are in a
        component configurartion */ -}}
    {{- if $ctx.componentName -}}
      {{- $secretName = printf "%s-%s-%s-image-pull-secrets" $ctx.Release.Name $chartShortName $ctx.componentName -}}
    {{- end -}}
    {{- $type := default "k8sSecret" .type -}}
    {{- if eq $type "k8sSecret" -}}
      {{- /* Use the specified name if using pre-existing k8s secrets */ -}}
      {{- $secretName = required "You must specify `name` when specifying imagePullSecrets with type `k8sSecret`" .name -}}
      {{- $secretDict := dict "name" $secretName "type" "k8sSecret" -}}
      {{- $imagePullSecrets = append $imagePullSecrets $secretDict -}}
    {{- else if eq $type "sscsi" -}}
      {{- $provider := required (printf "You must specify a provider when using sscsi for imagePullSecret %s" $secretName ) .provider -}}
      {{- $secretArn := required (printf "You must specify a secretArn when using sscsi for imagePullSecret %s" $secretName ) .secretArn -}}
      {{- $nameSuffix := "" -}}
      {{- if gt (len $imagePullSecretsValues) 1 -}}
        {{- $nameSuffix = printf "-%s" (trunc 8 (sha256sum $secretArn)) -}}
      {{- end -}}
      {{- /* Allow name override for secret name */ -}}
      {{- $secretName = ternary .nameOverride (printf "%s%s" $secretName $nameSuffix) (hasKey . "nameOverride") -}}
      {{- $secretDict := dict "name" $secretName "k8sSecretType" "kubernetes.io/dockerconfigjson" "type" "sscsi" "provider" $provider "secretArn" $secretArn -}}
      {{- /* Add the keys used for jmes paths etc */ -}}
      {{- $items := list -}}
      {{- $items = append $items (dict "key" ".dockerconfigjson" "objectAlias" $secretName) -}}
      {{- $_ := set $secretDict "secretItems" $items -}}
      {{- $imagePullSecrets = append $imagePullSecrets $secretDict -}}
    {{- else if eq $type "values" -}}
      {{- $registry := required (printf "You must specify a registry when using values for imagePullSecret %s" $secretName ) .registry -}}
      {{- $username := required (printf "You must specify a username when using values for imagePullSecret %s" $secretName ) .username -}}
      {{- $password := required (printf "You must specify a password when using values for imagePullSecret %s" $secretName ) .password -}}
      {{- $nameSuffix := "" -}}
      {{- if gt (len $imagePullSecretsValues) 1 -}}
        {{- $nameSuffix = printf "-%s" (trunc 8 (sha256sum $registry)) -}}
      {{- end -}}
      {{- $secretName = ternary .nameOverride (printf "%s%s" $secretName $nameSuffix) (hasKey . "nameOverride") -}}
      {{- $secretDict := dict "name" $secretName "type" "values" "registry" $registry "username" $username "password" $password -}}
      {{- $imagePullSecrets = append $imagePullSecrets $secretDict -}}
    {{- else -}}
      {{- fail (printf "Secrets of type `%s` are not supported. Please use `sscsi` or `k8sSecret`" $type) -}}
    {{- end -}}
  {{- end -}}
  {{- if ne (len $imagePullSecrets) 0 -}}
    {{- toYaml $imagePullSecrets -}}
  {{- end -}}
{{- end -}}

{{- /*
Concise version of the image pull secrets list, for use in podSpec
Re-creates list, only using the 'name' keys for each entry.
*/ -}}
{{- define "sdhCommon.imagePullSecretsList" -}}
  {{- $list := list -}}
  {{- range $v := (include "sdhCommon.imagePullSecrets" . | fromYamlArray ) -}}
    {{- $list = append $list (dict "name" $v.name ) -}}
  {{- end -}}
  {{- $list | toYaml -}}
{{- end -}}

{{- /*
Create list of database secrets to use.
Sets up default parameters so this can easily
be used elsewhere in the chart
*/ -}}
{{- define "sdhCommon.databaseSecrets" -}}
  {{- $databaseSecrets := list -}}
  {{- if (((.Values).database).external).enabled -}}
  {{- /* if and ((.Values.database).external).enabled (eq ((.Values.database.external).credentials).type "sscsi") */ -}}
    {{- $credentials := .Values.database.external.credentials -}}
    {{- range $v := .Values.database.external.databases -}}
      {{- $secretName := $v.secretName -}}
      {{- /* TODO: Make .Values.database.external.credentials optional
         and allow per-db credentials using .Values.database.external.databases[*].credentials */ -}}
      {{- $secretType := default "k8sSecret" $credentials.type -}}
      {{- if eq $secretType "k8sSecret" -}}
        {{- /* Use the specified name if using pre-existing k8s secrets */ -}}
        {{- $secretName = .name -}}
        {{- $secretDict := dict "name" $secretName "type" "k8sSecret" -}}
        {{- $databaseSecrets = append $databaseSecrets $secretDict -}}
      {{- else if eq $secretType "sscsi" -}}
        {{- $provider := required (printf "You must specify a provider when using sscsi for database secrets %s" $secretName ) $credentials.provider -}}
        {{- $secretArn := required (printf "You must specify a secretArn when using sscsi for database secrets %s" $secretName ) $v.secretArn -}}
        {{- $nameSuffix := "" -}}
        {{- /* Allow name override for secret name */ -}}
        {{- $secretName = ternary .nameOverride (printf "%s%s" $secretName $nameSuffix) (hasKey . "nameOverride") -}}
        {{- $secretDict := dict "name" $secretName "type" "sscsi" "provider" $provider "secretArn" $secretArn -}}
        {{- /* Add the keys used for jmes paths etc */ -}}
        {{- $items := list -}}
        {{- $items = append $items (dict "key" (default "password" $v.passKey) "objectAlias" (printf "%s-db-password" $v.secretName)) -}}
        {{- $items = append $items (dict "key" (default "host" $v.urlKey) "objectAlias" (printf "%s-db-host" $secretName)) -}}
        {{- $items = append $items (dict "key" (default "username" $v.userKey) "objectAlias" (printf "%s-db-user" $secretName)) -}}
        {{- $items = append $items (dict "key" (default "port" $v.portKey) "objectAlias" (printf "%s-db-port" $secretName)) -}}
        {{- $items = append $items (dict "key" (default "dbname" $v.dbnameKey) "objectAlias" (printf "%s-db-dbname" $secretName)) -}}
        {{- $items = append $items (dict "key" (default "engine" $v.engineKey) "objectAlias" (printf "%s-db-engine" $secretName)) -}}
        {{- $_ := set $secretDict "secretItems" $items -}}
        {{- $databaseSecrets = append $databaseSecrets $secretDict -}}
      {{- else -}}
        {{- fail (printf "Secrets of type `%s` are not supported. Please use `sscsi` or `k8sSecret`" $secretType) -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- $databaseSecrets | toYaml -}}
{{- end -}}

{{- /* Extra secrets provided via .Values.secrets */ -}}
{{- define "sdhCommon.extraSecrets" -}}
  {{- $extraSecrets := list -}}
  {{- $chartShortName := .Values.shortName -}}
  {{- $ctx := . -}}
  {{- range $k, $v := ((.Values).secrets) -}}
    {{- $secretName := $k -}}
    {{- if eq $v.type "sscsi" -}}
    {{- $secretFullName := printf "%s-%s-%s" $ctx.Release.Name $chartShortName $secretName -}}
      {{- if eq $v.provider "aws" -}}
        {{- $secretArn := required (printf "You must specify a secretArn when using sscsi for secret %s" $k ) $v.secretArn -}}
        {{- $secretDict := dict "name" $secretFullName "type" "sscsi" "provider" "aws" "secretArn" $secretArn -}}
        {{- /* Add the keys used for jmes paths etc */ -}}
        {{- $items := list -}}
        {{- range $key, $env := $v.envMappings -}}
          {{- $items = append $items (dict "key" $key "objectAlias" $key "envname" $env) -}}
        {{- end -}}
        {{- $_ := set $secretDict "secretItems" $items -}}
        {{- $extraSecrets = append $extraSecrets $secretDict -}}
        {{- /*
          Define other providers here:
          {{- else if eq .Values.image.credentials.provider "otherprovider" -}}
          - add code to build $sscsiObject and append to $sscsiObjects
        */ -}}
      {{- else -}}
        {{- fail (printf "The `%s` Secrets Store CSI provider is not currently supported." $v.provider) -}}
      {{- end -}}
    {{- else if eq $v.type "k8sSecret" -}}
      {{- $secretName := default $secretName $v.secretNameOverride -}}
      {{- $secretDict := dict "name" $secretName "type" "k8sSecret" -}}
      {{- /* Add the keys used for jmes paths etc */ -}}
      {{- $items := list -}}
      {{- range $key, $env := $v.envMappings -}}
        {{- $items = append $items (dict "key" $key "objectAlias" $key "envname" $env) -}}
      {{- end -}}
      {{- $_ := set $secretDict "secretItems" $items -}}
      {{- if ($v.autoCreate).enabled -}}
        {{- if ne (len $v.autoCreate.keys) (len $v.envMappings) -}}
          {{- fail (printf "Definition for secret '%s' has mis-matching `envMapping` and `autoCreate`. Please ensure they match." $secretName) -}}
        {{- end -}}
        {{- $_ := set $secretDict "autoCreate" $v.autoCreate -}}
      {{- end -}}
      {{- $extraSecrets = append $extraSecrets $secretDict -}}
    {{- else -}}
        {{- fail (printf "Secrets of type `%s` are not supported. Please use `sscsi` or `k8sSecret`" $v.type) -}}
    {{- end -}}
  {{- end -}}
  {{- $extraSecrets | toYaml -}}
{{- end -}}

{{/*
Define Extra Secrets Environment
*/}}
{{- define "sdhCommon.extraSecretsEnvVars" -}}
  {{- $envVars := list -}}
  {{- range $v := (include "sdhCommon.extraSecrets" . | fromYamlArray) -}}
    {{- /* Define and add env var from secret */ -}}
    {{- $secretName := $v.name -}}
    {{- range $secretItem := $v.secretItems -}}
      {{- if hasKey $secretItem "envname" -}}
        {{- $secretKeyRef := dict -}}
        {{- $_ := set $secretKeyRef "name" $secretName -}}
        {{- $_ := set $secretKeyRef "key" $secretItem.key -}}
        {{- $env := dict -}}
        {{- $_ := set $env "name" $secretItem.envname -}}
        {{- $_ := set $env "valueFrom" (dict "secretKeyRef" $secretKeyRef) -}}
        {{- $envVars = append $envVars $env -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- $envVars | toYaml -}}
{{- end -}}

{{- /* Secret for the License Key */ -}}
{{- define "sdhCommon.licenseSecrets" -}}
  {{- $licenseSecrets := list -}}
  {{- $chartShortName := .Values.shortName -}}
  {{- if eq ((.Values).license).type "sscsi" -}}
    {{- if eq .Values.license.provider "aws" -}}
      {{- $secretName := printf "%s-%s-license" .Release.Name $chartShortName -}}
      {{- $secretDict := dict "name" $secretName "type" "sscsi" "provider" "aws" "secretArn" .Values.license.secretArn -}}
      {{- /* Add the keys used for jmes paths etc */ -}}
      {{- $items := list -}}
      {{- $items = append $items (dict "key" "jwt" "objectAlias" "license.jwt") -}}
      {{- $_ := set $secretDict "secretItems" $items -}}
      {{- $licenseSecrets = append $licenseSecrets $secretDict -}}
      {{- /*
        Define other providers here:
        {{- else if eq .Values.image.credentials.provider "otherprovider" -}}
        - add code to build $sscsiObject and append to $sscsiObjects
      */ -}}
    {{- else -}}
      {{- fail (printf "The `%s` Secrets Store CSI provider is not currently supported." .Values.license.provider) -}}
    {{- end -}}
  {{- end -}}
  {{- $licenseSecrets | toYaml -}}
{{- end -}}

{{- /* Kafka Secrets
       Include secrets for External Kafka certificates & credentials */ -}}
{{- define "sdhCommon.kafkaSecrets" -}}
  {{- $kafkaSecrets := list -}}
  {{- $chartShortName := .Values.shortName -}}
  {{- if (((.Values).messageBroker).external).enabled -}}
    {{- $kafkaExternalConfig := (include "kafka.external.config" . | fromYaml) -}}
    {{- $kafkaExternalCacert := ($kafkaExternalConfig.connection).caCert -}}
    {{- if and ($kafkaExternalConfig.enabled) (eq $kafkaExternalCacert.type "sscsi") -}}
      {{- if eq $kafkaExternalCacert.provider "aws" -}}
        {{- $secretName := printf "%s-%s-kafka-ca-cert" .Release.Name $chartShortName -}}
        {{- $secretDict := dict "name" $secretName "type" "sscsi" "provider" "aws" "secretArn" $kafkaExternalCacert.secretArn -}}
        {{- /* Add the keys used for jmes paths etc */ -}}
        {{- $items := list -}}
        {{- $items = append $items (dict "key" "ca.p12" "objectAlias" "ca.p12") -}}
        {{- $items = append $items (dict "key" "ca.password" "objectAlias" "ca.password") -}}
        {{- $_ := set $secretDict "secretItems" $items -}}
        {{- $kafkaSecrets = append $kafkaSecrets $secretDict -}}
        {{- /*
          Define other providers here:
          {{- else if eq .Values.image.credentials.provider "otherprovider" -}}
          - add code to build $sscsiObject and append to $sscsiObjects
        */ -}}
      {{- else -}}
        {{- fail (printf "The `%s` Secrets Store CSI provider is not currently supported." $kafkaExternalCacert.provider) -}}
      {{- end -}}
    {{- end -}}
    {{- $kafkaExternalUserCredentials := ($kafkaExternalConfig.authentication).userCert -}}
    {{- if and ($kafkaExternalConfig.enabled) (eq $kafkaExternalUserCredentials.type "sscsi") -}}
      {{- if eq $kafkaExternalUserCredentials.provider "aws" -}}
        {{- $secretName := printf "%s-%s-kafka-user-cert" .Release.Name $chartShortName -}}
        {{- $secretDict := dict "name" $secretName "type" "sscsi" "provider" "aws" "secretArn" $kafkaExternalUserCredentials.secretArn -}}
        {{- /* Add the keys used for jmes paths etc */ -}}
        {{- $items := list -}}
        {{- $items = append $items (dict "key" "user.p12" "objectAlias" "user.p12") -}}
        {{- $items = append $items (dict "key" "user.password" "objectAlias" "user.password") -}}
        {{- $_ := set $secretDict "secretItems" $items -}}
        {{- $kafkaSecrets = append $kafkaSecrets $secretDict -}}
        {{- /*
          Define other providers here:
          {{- else if eq .Values.image.credentials.provider "otherprovider" -}}
          - add code to build $sscsiObject and append to $sscsiObjects
        */ -}}
      {{- else -}}
        {{- fail (printf "The `%s` Secrets Store CSI provider is not currently supported." $kafkaExternalUserCredentials.provider) -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- $kafkaSecrets | toYaml -}}
{{- end -}}

{{- define "sdhCommon.allSecrets" -}}
  {{- $allSecrets := list -}}
  {{- /* Image Pull Secrets */ -}}
  {{- $allSecrets = concat $allSecrets (include "sdhCommon.imagePullSecrets" . | fromYamlArray) -}}
  {{- /* External Database Credentials */ -}}
  {{- $allSecrets = concat $allSecrets (include "sdhCommon.databaseSecrets" . | fromYamlArray) -}}
  {{- /* Extra secrets */ -}}
  {{- $allSecrets = concat $allSecrets (include "sdhCommon.extraSecrets" . | fromYamlArray) -}}
  {{- /* CDR License */ -}}
  {{- $allSecrets = concat $allSecrets (include "sdhCommon.licenseSecrets" . | fromYamlArray) -}}
  {{- /* Kafka Certificates */ -}}
  {{- $allSecrets = concat $allSecrets (include "sdhCommon.kafkaSecrets" . | fromYamlArray) -}}
  {{- /*
      Make sure we don't define the same Object twice. If we are specifying the same ARN or secretName twice in the values
      file we need to handle it differently.
      TODO: Move this uniqueness check to the `allsecrets` helper
    */ -}}
  {{- range $outerIndex, $secretToCheck := $allSecrets -}}
    {{- $unique := true -}}
    {{- range $innerIndex, $origlistvalue := $allSecrets -}}
      {{- /* Don't compare it with itself! ;) */ -}}
      {{- if not (eq $outerIndex $innerIndex) -}}
        {{- if and (eq $secretToCheck.type "sscsi") (eq $secretToCheck.provider "aws") -}}
          {{- if eq ($origlistvalue.secretArn) $secretToCheck.secretArn -}}
            {{- /* Not unique, so disable object creation further down */ -}}
            {{- $unique = false -}}
            {{- /* Merging keys is not possible unless we refactor how the key handling
                  is done. Instead, for now at least, we will fail if the same secret
                  ARN is used, to avoid unexpected failures */ -}}
            {{- fail (printf "Outer: %v\nInner: %v\n" $outerIndex $innerIndex) -}}
            {{- fail "You cannot specify the same AWS Secret ARN for multiple secrets" -}}
          {{- end -}}
        {{- end -}}
        {{- if eq $origlistvalue.name $secretToCheck.name -}}
          {{- /* Not unique, so disable object creation further down */ -}}
          {{- $unique = false -}}
          {{- /* Merging keys is not possible unless we refactor how the key handling
                is done. Instead, for now at least, we will fail if the same secret
                ARN is used, to avoid unexpected failures */ -}}
          {{- fail (printf "Outer: %s\nInner: %s\n" ($secretToCheck | toYaml) ($origlistvalue | toYaml)) -}}
          {{- fail "You cannot specify the same K8s secretName for multiple secrets" -}}
        {{- end -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- $allSecrets | toYaml -}}
{{- end -}}

{{- /*
The following helpers are used to create configurations and volume mounts for
the Secrets Store CSI Driver.
Current providers supported:
* AWS Secrets Manager
*/ -}}

{{- define "sdhCommon.sscsi.enabled" -}}
  {{- /* Enabled if any secrets are using SSCSI */ -}}
  {{- $sscsiEnabled := "false" -}}
  {{- $allSecrets := (include "sdhCommon.allSecrets" . | fromYamlArray) -}}
  {{- range $v := $allSecrets -}}
    {{- if eq $v.type "sscsi" -}}
      {{- $sscsiEnabled = "true" -}}
    {{- end -}}
  {{- end -}}
  {{- $sscsiEnabled -}}
{{- end -}}

{{- define "sdhCommon.sscsi.secretProviderClassName" -}}
  {{- $chartShortName := .Values.shortName -}}
  {{- if .componentName -}}
    {{- printf "%s-%s-%s" .Release.Name $chartShortName .componentName -}}
  {{- else -}}
    {{- printf "%s-%s" .Release.Name $chartShortName -}}
  {{- end -}}
{{- end -}}


{{- /*
Define `objects` for the Secrets Store CSI Secret Provider Custom Resource
These objects pull secrets from the configured vault and mount them into a
pod's filesystem
*/ -}}
{{- define "sdhCommon.sscsi.objects" -}}
  {{- $sscsiObjects := list -}}
  {{- $allSecrets := (include "sdhCommon.allSecrets" . | fromYamlArray) -}}
  {{- range $v := $allSecrets -}}
    {{- if eq $v.type "sscsi" -}}
      {{- if eq $v.provider "aws" -}}
        {{- $sscsiObject := dict -}}
        {{- $_ := set $sscsiObject "objectName" $v.secretArn -}}
        {{- $_ := set $sscsiObject "objectAlias" $v.name -}}
        {{- $jmesPathList := list -}}
        {{- range $secretItem := $v.secretItems -}}
          {{- $jmesPath := dict -}}
          {{- $_ := set $jmesPath "objectAlias" $secretItem.objectAlias -}}
          {{- $_ := set $jmesPath "path" $secretItem.key -}}
          {{- $jmesPathList = append $jmesPathList $jmesPath -}}
        {{- end -}}
        {{- $_ := set $sscsiObject "jmesPath" $jmesPathList -}}
        {{- $sscsiObjects = append $sscsiObjects $sscsiObject -}}
      {{- /* Define other providers here:
      {{- else if eq $v.provider "otherprovider" -}}
        - add code to build $sscsiObject and append to $sscsiObjects
        */ -}}
      {{- else -}}
        {{- fail (printf "The `%s` Secrets Store CSI provider is not currently supported." $v.provider) -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- $sscsiObjects | toYaml -}}
{{- end -}}

{{- /*
Define `syncedSecrets` for the Secrets Store CSI Secret Provider Custom Resource
These are used to create Kubernetes Secrets that are synced to mounted SSCSI secrets
*/ -}}
{{- define "sdhCommon.sscsi.syncedSecrets" -}}
  {{- $sscsiSyncedSecrets := list -}}
  {{- $allSecrets := (include "sdhCommon.allSecrets" . | fromYamlArray) -}}
  {{- range $v := $allSecrets -}}
    {{- if eq $v.type "sscsi" -}}
      {{- if eq $v.provider "aws" -}}
        {{- $sscsiSyncedSecret := dict "secretName" $v.name -}}
        {{- $_ := set $sscsiSyncedSecret "type" (default "Opaque" $v.k8sSecretType) -}}
        {{- $items := list -}}
        {{- range $secretItem := $v.secretItems -}}
          {{- $items = append $items (dict "objectName" $secretItem.objectAlias "key" $secretItem.key) -}}
        {{- end -}}
        {{- $_ := set $sscsiSyncedSecret "data" $items -}}
        {{- $sscsiSyncedSecrets = append $sscsiSyncedSecrets $sscsiSyncedSecret -}}
      {{- /* Define other providers here:
      {{- else if eq $v.provider "otherprovider" -}}
        - add code to build $sscsiObject and append to $sscsiObjects
        */ -}}
      {{- else -}}
        {{- fail (printf "The `%s` Secrets Store CSI provider is not currently supported." $v.provider) -}}
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- $sscsiSyncedSecrets | toYaml -}}
{{- end -}}

{{- /*
Define the volumes that will be used by Secrets Store CSI Driver to mount
secrets in to pods
*/ -}}
{{- define "sdhCommon.sscsi.volumes" -}}
  {{- $sscsiVolumes := list -}}
  {{- if eq ((include "sdhCommon.sscsi.enabled" . ) | trim ) "true" -}}
    {{- $volumeAttributes := dict "secretProviderClass" (include "sdhCommon.sscsi.secretProviderClassName" .) -}}
    {{- $csi := dict "driver" "secrets-store.csi.k8s.io" "readOnly" true "volumeAttributes" $volumeAttributes -}}
    {{- $sscsiVolume := dict "name" (include "sdhCommon.sscsi.secretProviderClassName" .) "csi" $csi -}}
    {{- $sscsiVolumes = append $sscsiVolumes $sscsiVolume -}}
  {{- end -}}
  {{- $sscsiVolumes | toYaml -}}
{{- end -}}

{{- /*
Define the volume mounts that will be used by Secrets Store CSI Driver to
mount secrets in to pods
*/ -}}
{{ define "sdhCommon.sscsi.volumeMounts" }}
  {{- $sscsiVolumeMounts := list -}}
  {{- if eq ((include "sdhCommon.sscsi.enabled" . ) | trim ) "true" -}}
    {{- $sscsiVolumeMount := dict "name" (include "sdhCommon.sscsi.secretProviderClassName" .) -}}
    {{- $_ := set $sscsiVolumeMount "mountPath" "/mnt/sscsi" -}}
    {{- $_ := set $sscsiVolumeMount "readOnly" true -}}
    {{- $sscsiVolumeMounts = append $sscsiVolumeMounts $sscsiVolumeMount -}}
  {{- end -}}
  {{- $sscsiVolumeMounts | toYaml -}}
{{ end }}

{{- /*
Automatically create any kubernetes secrets with random values
*/ -}}
{{ define "sdhCommon.secrets.k8sSecretObjects" }}
  {{- $allSecrets := (include "sdhCommon.allSecrets" . | fromYamlArray) -}}
  {{- $secretsToCreate := list -}}
  {{- $ctx := . -}}
  {{- /* We only do this for k8sSecrets with `autoCreate` enabled */ -}}
  {{- range $secret := $allSecrets -}}
    {{- if and (eq $secret.type "k8sSecret") $secret.autoCreate -}}
      {{- $existingSecretObj := (lookup "v1" "Secret" $ctx.Release.Namespace $secret.name) | default dict -}}
      {{- $existingSecretData := (get $existingSecretObj "data") | default dict -}}
      {{- $data := dict -}}
      {{- range $key, $config := $secret.autoCreate.keys -}}
        {{- if eq $config.type "value" -}}
          {{- $_ := set $data $key ($config.value | b64enc) -}}
        {{- else if eq $config.type "uuidv4" -}}
          {{- $secretValue := (get $existingSecretData $key) | default (uuidv4 | b64enc) -}}
          {{- $_ := set $data $key $secretValue -}}
        {{- else if eq $config.type "rand32" -}}
          {{- $secretValue := (get $existingSecretData $key) | default (randAlphaNum 32 | b64enc) -}}
          {{- $_ := set $data $key $secretValue -}}
        {{- else -}}
          {{- fail printf "Unsupported type '%s' for auto-generated secret '%s'" $secret.type $secret.name -}}
        {{- end -}}
      {{- end -}}
      {{- $secretsToCreate = append $secretsToCreate (dict "name" $secret.name "data" $data) -}}
    {{- end -}}
  {{- end -}}
  {{- $secretsToCreate | toYaml -}}
{{ end }}
