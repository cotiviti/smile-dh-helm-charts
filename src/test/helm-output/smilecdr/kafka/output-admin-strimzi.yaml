---
# Source: smilecdr/templates/scdr/scdr-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-scdrnode-masterdev
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: smilecdr
      smilecdr/nodeId: masterdev
---
# Source: smilecdr/templates/messagebroker/kafka-admin-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-kafka-admin
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr-kafka-admin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2024.11.PRE-13"
    app.kubernetes.io/managed-by: Helm
data:
  client.properties.template: |-
    # Kafka consumer properties auto generated from Helm Chart. Do not edit manually!

    security.protocol=SSL
    ssl.truststore.location=/home/smile/smilecdr/classes/client_certificates/kafka-ca-cert.p12
    ssl.truststore.password=${KAFKA_BROKER_CA_CERT_PWD}
    ssl.keystore.location=/home/smile/smilecdr/classes/client_certificates/kafka-client-cert.p12
    ssl.keystore.password=${KAFKA_CLIENT_CERT_PWD}
  entrypoint.sh: |-
    #!/bin/sh
    mkdir -p /opt/kafka/custom-config/
    # This creates a config file for use by Kafka CLI commands
    /usr/bin/envsubst < /tmp/templates/client.properties.template > /opt/kafka/custom-config/client.properties
    # Modify the kafka-run-class to include the above config file and the bootstrap address from the environment.
    # It seems there is no built-in way to auto configure client config in the Kafka cli commands
    # In addition to that, some commands use different client options than others.

    # Define the code snippet to inject into `kafka-run-class.sh`
    sed -i '/^# Launch mode/i\
    # Determine if the invoked command requires `command-config`, `consumer.config` or `producer.config`\
    if [ "$1" = "kafka.tools.ConsoleConsumer" ]; then\
      CLIENT_PROPERTIES="--consumer.config /opt/kafka/custom-config/client.properties"\
    elif [ "$1" = "kafka.tools.ConsoleProducer" ]; then\
      CLIENT_PROPERTIES="--producer.config /opt/kafka/custom-config/client.properties"\
    else\
      CLIENT_PROPERTIES="--command-config /opt/kafka/custom-config/client.properties"\
    fi\
    ' /opt/kafka/bin/kafka-run-class.sh

    /bin/sed -i -E 's/(\$KAFKA_OPTS \"\$@\")$/\1 ${CLIENT_PROPERTIES} --bootstrap-server \${KAFKA_BOOTSTRAP_ADDRESS}/g' /opt/kafka/bin/kafka-run-class.sh
    sleep infinity
  kafkaconsumerhelper.sh: |-
    # Some Helper aliases for running Kafka CLI commands.
    # TODO: Create helper command to convert the timestamp when using `--property print.timestamp=true`
    alias convert_timestamp='awk -F "[\t]" '"'"'{
      timestamp = substr($1,12);
      milliseconds = substr(timestamp, length(timestamp)-2);
      seconds = substr(timestamp, 1, length(timestamp)-3);
      printf "CreateTime: %s\t%s\n", strftime("%Y-%m-%d %H:%M:%S", seconds) "." milliseconds, $2;
    }'"'"''
  testmessage.json: |-
    {"myTestMessage":{"hello":"there!"}}
  loginmessage.sh: |-
    # Kafka Admin Pod Login Message
    echo "*************************************************"
    echo "*                                               *"
    echo "*  Welcome to the Kafka Admin Pod environment!  *"
    echo "*                                               *"
    echo "*************************************************"
    echo "The Kafka CLI commands in this environment have"
    echo "been modified so that you do not need to specify"
    echo "client configurations or bootstrap servers."
    echo ""
    echo "Example commands:"
    echo "* Check Available Topics"
    echo "./bin/kafka-topics.sh --list"
    echo ""
    echo "* Check smilecdr consumer group"
    echo "./bin/kafka-consumer-groups.sh --describe --group smilecdr"
    echo ""
    echo "* Show total topic lag for smilecdr consumer group"
    echo "./bin/kafka-consumer-groups.sh --describe --group smilecdr | awk -F' ' 'NR>1 && $6 ~ /^[0-9]+$/ {lag[$2]+=$6} END {for (topic in lag) printf("Topic: %s, Total Lag: %d\n", topic, lag[topic]);}'"
    echo ""
    echo "* Run Console Consumer (With message publishing timestamps)"
    echo "./bin/kafka-console-consumer.sh --property print.timestamp=true --topic batch2.work.notification.Masterdev.persistence"
    echo ""
    echo "* Run Console Consumer From Beginnning (Be careful, if there are a lot of messages, this may flood your terminal connection!)"
    echo "./bin/kafka-console-consumer.sh --property print.timestamp=true --topic batch2.work.notification.Masterdev.persistence --from-beginning"
    echo ""
    echo "* Convert consumer timestamps by piping into the \`convert_timestamp\` alias like so..."
    echo "./bin/kafka-console-consumer.sh --property print.timestamp=true --topic batch2.work.notification.Masterdev.persistence --from-beginning | convert_timestamp"
    echo ""
    echo "* Send a message to a topic using the Console Producer..."
    echo "cat /tmp/testmessage.json | ./bin/kafka-console-producer.sh --topic batch2.work.notification.Masterdev.persistence"
    echo ""
    echo "******************************************"
---
# Source: smilecdr/templates/messagebroker/kafka-properties-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-kafka-client-properties-masterdev-node
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
data:
  consumer.properties: |-
    # Kafka consumer properties auto generated from Helm Chart. Do not edit manually!

    heartbeat.interval.ms=3000
    max.poll.interval.ms=300000
    max.poll.records=20
    session.timeout.ms=10000
  producer.properties: |-
    # Kafka producer properties auto generated from Helm Chart. Do not edit manually!
---
# Source: smilecdr/templates/scdr/scdr-node-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-scdrnode-masterdev
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
data:
  cdr-config-Master.properties: |-
    ################################################################################
    # Node Configuration
    ################################################################################
    node.id 	= Masterdev
    node.propertysource 	= PROPERTIES
    node.config.locked 	= true
    node.environment.type 	= DEV
    node.security.strict 	= false

    module.clustermgr.config.messagebroker.type                         =KAFKA
    module.clustermgr.config.kafka.bootstrap_address                    =#{env['KAFKA_BOOTSTRAP_ADDRESS']}
    module.clustermgr.config.kafka.ssl.enabled                          =#{env['KAFKA_SSL_ENABLED']}
    module.clustermgr.config.kafka.consumer.properties.file             =classpath:/cdr_kafka_config/cdr-kafka-consumer-config.properties
    module.clustermgr.config.kafka.producer.properties.file             =classpath:/cdr_kafka_config/cdr-kafka-producer-config.properties
    module.clustermgr.config.kafka.security.protocol                    =SSL
    module.clustermgr.config.kafka.ssl.truststore.location              =/home/smile/smilecdr/classes/client_certificates/kafka-ca-cert.p12
    module.clustermgr.config.kafka.ssl.truststore.password              =#{env['KAFKA_BROKER_CA_CERT_PWD']}
    module.clustermgr.config.kafka.ssl.keystore.location                =/home/smile/smilecdr/classes/client_certificates/kafka-client-cert.p12
    module.clustermgr.config.kafka.ssl.keystore.password                =#{env['KAFKA_CLIENT_CERT_PWD']}
    module.clustermgr.config.kafka.ssl.key.password                     =#{null}

    ################################################################################
    # Other Modules are Configured Below
    ################################################################################

    # The following setting controls where module configuration is ultimately stored.
    # When set to "DATABASE" (which is the default), the clustermgr configuration is
    # always read but the other modules are stored in the database upon the first
    # launch and their configuration is read from the database on subsequent
    # launches. When set to "PROPERTIES", values in this file are always used.
    #
    # In other words, in DATABASE mode, the module definitions below this line are
    # only used to seed the database upon the very first startup of the sytem, and
    # will be ignored after that. In PROPERTIES mode, the module definitions below
    # are read every time the system starts, and existing definitions and config are
    # overwritten by what is in this file.
    #
    ################################################################################
    # ENDPOINT: JSON Admin Services
    ################################################################################
    module.admin_json.type 	= ADMIN_JSON
    module.admin_json.requires.SECURITY_IN_UP 	= local_security
    module.admin_json.config.anonymous.access.enabled 	= true
    module.admin_json.config.context_path 	= /admin_json
    module.admin_json.config.https_forwarding_assumed 	= true
    module.admin_json.config.port 	= 9000
    module.admin_json.config.respect_forward_headers 	= true
    module.admin_json.config.security.http.basic.enabled 	= true
    module.admin_json.config.tls.enabled 	= false
    ################################################################################
    # ENDPOINT: Web Admin
    ################################################################################
    module.admin_web.type 	= ADMIN_WEB
    module.admin_web.requires.SECURITY_IN_UP 	= local_security
    module.admin_web.config.context_path 	= /
    module.admin_web.config.https_forwarding_assumed 	= true
    module.admin_web.config.port 	= 9100
    module.admin_web.config.respect_forward_headers 	= true
    module.admin_web.config.tls.enabled 	= false
    ################################################################################
    # External Audit DB Config
    ################################################################################
    module.audit.type 	= AUDIT_LOG_PERSISTENCE
    module.audit.config.db.driver 	= POSTGRES_9_4
    module.audit.config.db.password 	= #{env['DB_PASS']}
    module.audit.config.db.schema_update_mode 	= UPDATE
    module.audit.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.audit.config.db.username 	= #{env['DB_USER']}
    ################################################################################
    # Cluster Manager Configuration
    ################################################################################
    module.clustermgr.config.audit_log.db.always_write_to_clustermgr 	= false
    module.clustermgr.config.audit_log.request_headers_to_store 	= Content-Type,Host
    module.clustermgr.config.db.driver 	= POSTGRES_9_4
    module.clustermgr.config.db.password 	= #{env['DB_PASS']}
    module.clustermgr.config.db.schema_update_mode 	= UPDATE
    module.clustermgr.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.clustermgr.config.db.username 	= #{env['DB_USER']}
    module.clustermgr.config.retain_transaction_log_days 	= 7
    module.clustermgr.config.seed_keystores.file 	= classpath:/config_seeding/keystores.json
    module.clustermgr.config.stats.heartbeat_persist_frequency_ms 	= 15000
    module.clustermgr.config.stats.stats_cleanup_frequency_ms 	= 300000
    module.clustermgr.config.stats.stats_persist_frequency_ms 	= 60000
    module.clustermgr.config.transactionlog.enabled 	= false
    ################################################################################
    # ENDPOINT: FHIR Service
    ################################################################################
    module.fhir_endpoint.type 	= ENDPOINT_FHIR_REST
    module.fhir_endpoint.requires.PERSISTENCE_ALL 	= persistence
    module.fhir_endpoint.requires.SECURITY_IN_UP 	= local_security
    module.fhir_endpoint.config.anonymous.access.enabled 	= true
    module.fhir_endpoint.config.base_url.fixed 	= https://smilecdr-example.local/fhir_request
    module.fhir_endpoint.config.browser_highlight.enabled 	= true
    module.fhir_endpoint.config.context_path 	= /fhir_request
    module.fhir_endpoint.config.cors.enable 	= true
    module.fhir_endpoint.config.default_encoding 	= JSON
    module.fhir_endpoint.config.default_pretty_print 	= true
    module.fhir_endpoint.config.https_forwarding_assumed 	= true
    module.fhir_endpoint.config.port 	= 8000
    module.fhir_endpoint.config.request_validating.enabled 	= false
    module.fhir_endpoint.config.request_validating.fail_on_severity 	= ERROR
    module.fhir_endpoint.config.request_validating.require_explicit_profile_definition.enabled 	= false
    module.fhir_endpoint.config.request_validating.response_headers.enabled 	= false
    module.fhir_endpoint.config.request_validating.tags.enabled 	= false
    module.fhir_endpoint.config.respect_forward_headers 	= true
    module.fhir_endpoint.config.security.http.basic.enabled 	= true
    module.fhir_endpoint.config.threadpool.max 	= 10
    module.fhir_endpoint.config.threadpool.min 	= 2
    module.fhir_endpoint.config.tls.enabled 	= false
    ################################################################################
    # ENDPOINT: FHIRWeb Console
    ################################################################################
    module.fhirweb_endpoint.type 	= ENDPOINT_FHIRWEB
    module.fhirweb_endpoint.requires.ENDPOINT_FHIR 	= fhir_endpoint
    module.fhirweb_endpoint.requires.SECURITY_IN_UP 	= local_security
    module.fhirweb_endpoint.config.anonymous.access.enabled 	= false
    module.fhirweb_endpoint.config.context_path 	= /fhirweb
    module.fhirweb_endpoint.config.https_forwarding_assumed 	= true
    module.fhirweb_endpoint.config.port 	= 8001
    module.fhirweb_endpoint.config.respect_forward_headers 	= true
    module.fhirweb_endpoint.config.threadpool.max 	= 10
    module.fhirweb_endpoint.config.threadpool.min 	= 2
    module.fhirweb_endpoint.config.tls.enabled 	= false
    ################################################################################
    # license
    ################################################################################
    module.license.type 	= LICENSE
    ################################################################################
    # Local Storage Inbound Security
    ################################################################################
    module.local_security.type 	= SECURITY_IN_LOCAL
    module.local_security.config.password_encoding_type 	= BCRYPT_12_ROUND
    module.local_security.config.seed.users.file 	= classpath:/config_seeding/users.json
    ################################################################################
    # ENDPOINT: Package Registry
    ################################################################################
    module.package_registry.type 	= ENDPOINT_PACKAGE_REGISTRY
    module.package_registry.requires.PACKAGE_CACHE 	= persistence
    module.package_registry.requires.SECURITY_IN_UP 	= local_security
    module.package_registry.config.anonymous.access.enabled 	= true
    module.package_registry.config.context_path 	= /package_registry
    module.package_registry.config.https_forwarding_assumed 	= true
    module.package_registry.config.port 	= 8002
    module.package_registry.config.respect_forward_headers 	= true
    module.package_registry.config.security.http.basic.enabled 	= true
    module.package_registry.config.tls.enabled 	= false
    ################################################################################
    # Database Configuration
    ################################################################################
    module.persistence.type 	= PERSISTENCE_R4
    module.persistence.config.dao_config.allow_external_references.enabled 	= false
    module.persistence.config.dao_config.allow_inline_match_url_references.enabled 	= true
    module.persistence.config.dao_config.allow_multiple_delete.enabled 	= false
    module.persistence.config.dao_config.expire_search_results_after_minutes 	= 60
    module.persistence.config.db.driver 	= POSTGRES_9_4
    module.persistence.config.db.hibernate.showsql 	= false
    module.persistence.config.db.hibernate_search.directory 	= ./database/lucene_fhir_persistence
    module.persistence.config.db.password 	= #{env['DB_PASS']}
    module.persistence.config.db.schema_update_mode 	= UPDATE
    module.persistence.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.persistence.config.db.username 	= #{env['DB_USER']}
    ################################################################################
    # ENDPOINT: SMART Security
    ################################################################################
    module.smart_auth.type 	= SECURITY_OUT_SMART
    module.smart_auth.requires.CLUSTERMGR 	= clustermgr
    module.smart_auth.requires.SECURITY_IN_UP 	= local_security
    module.smart_auth.config.context_path 	= /smartauth
    module.smart_auth.config.https_forwarding_assumed 	= true
    module.smart_auth.config.issuer.url 	= https://smilecdr-example.local/smartauth
    module.smart_auth.config.openid.signing.keystore_id 	= default-keystore
    module.smart_auth.config.port 	= 9200
    module.smart_auth.config.respect_forward_headers 	= true
    module.smart_auth.config.tls.enabled 	= false
    ################################################################################
    # Subscription
    ################################################################################
    module.subscription.type 	= SUBSCRIPTION_MATCHER
    module.subscription.requires.PERSISTENCE_ALL 	= persistence
    ################################################################################
    # External Transaction Log DB
    ################################################################################
    module.transaction.type 	= TRANSACTION_LOG_PERSISTENCE
    module.transaction.config.db.driver 	= POSTGRES_9_4
    module.transaction.config.db.password 	= #{env['DB_PASS']}
    module.transaction.config.db.schema_update_mode 	= UPDATE
    module.transaction.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.transaction.config.db.username 	= #{env['DB_USER']}


  smileutil: |-
    #!/bin/bash

    # ----------------------------------------------------------------------------
    # CDR CLI Tool for use in Helm Chart deployment
    #

    # CDR home directory is hard coded as this is not configurable with the Helm Chart deployment method.
    CDRDIR=/home/smile/smilecdr/

    # Change the working directory to the CDR home directory
    cd $CDRDIR

    # Build the classpath
    CLASSPATH="$CDRDIR/classes:$CDRDIR/lib/*:$CDRDIR/customerlib/*"

    # Unset JAVA_TOOL_OPTIONS as it will cause failure if it includes any listeners (i.e. for JMX agent)
    unset JAVA_TOOL_OPTIONS

    JAVA_CMD="java $JAVA_OPTS -cp $CLASSPATH -Dsmile.basedir=$CDRDIR -Djava.io.tmpdir=$CDRDIR/tmp ca.cdr.cli.App $*"
    $JAVA_CMD
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdrnode-masterdev-admin-json
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: admin-json
      port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
    smilecdr/nodeId: masterdev
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdrnode-masterdev-admin-web
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: admin-web
      port: 9100
      targetPort: 9100
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
    smilecdr/nodeId: masterdev
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdrnode-masterdev-fhir
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: fhir
      port: 8000
      targetPort: 8000
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
    smilecdr/nodeId: masterdev
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdrnode-masterdev-fhirweb
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: fhirweb
      port: 8001
      targetPort: 8001
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
    smilecdr/nodeId: masterdev
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdrnode-masterdev-pkg-registry
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: pkg-registry
      port: 8002
      targetPort: 8002
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
    smilecdr/nodeId: masterdev
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdrnode-masterdev-smart-auth
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: smart-auth
      port: 9200
      targetPort: 9200
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
    smilecdr/nodeId: masterdev
---
# Source: smilecdr/templates/messagebroker/kafka-admin-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-kafka-admin
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr-kafka-admin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/version: "2024.11.PRE-13"
    app.kubernetes.io/managed-by: Helm
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: smilecdr-kafka-admin
      app.kubernetes.io/instance: release-name
  template:
    metadata:
      labels:
        helm.sh/chart: No Chart Version - Unit Testing
        app.kubernetes.io/name: smilecdr-kafka-admin
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/version: "2024.11.PRE-13"
        app.kubernetes.io/managed-by: Helm
    spec:
      imagePullSecrets:
        []
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
      initContainers:
        []
      containers:
        - name: kafka-admin
          image: "quay.io/strimzi/kafka:0.33.2-kafka-3.4.0"
          imagePullPolicy: IfNotPresent
          securityContext:
            runAsUser: 0
          command:
          - '/bin/sh'
          - '/tmp/entrypoint.sh'
          env:
          - name: KAFKA_BOOTSTRAP_ADDRESS
            value: release-name-kafka-bootstrap:9093
          - name: KAFKA_SSL_ENABLED
            value: "true"
          - name: KAFKA_BROKER_CA_CERT_PWD
            valueFrom:
              secretKeyRef:
                key: ca.password
                name: release-name-cluster-ca-cert
          - name: KAFKA_CLIENT_CERT_PWD
            valueFrom:
              secretKeyRef:
                key: user.password
                name: release-name-kafka-user
          - name: CLASSPATH
            value: /opt/kafka/classes/aws-msk-iam-auth-1.1.9-all.jar
          volumeMounts:
            - mountPath: /tmp/templates/client.properties.template
              name: kafka-admin
              subPath: client.properties.template
            - mountPath: /tmp/entrypoint.sh
              name: kafka-admin
              subPath: entrypoint.sh
            - mountPath: /etc/profile.d/kafkaconsumerhelper.sh
              name: kafka-admin
              subPath: kafkaconsumerhelper.sh
            - mountPath: /etc/profile.d/loginmessage.sh
              name: kafka-admin
              subPath: loginmessage.sh
            - mountPath: /tmp/testmessage.json
              name: kafka-admin
              subPath: testmessage.json
            - mountPath: /home/smile/smilecdr/classes/client_certificates/kafka-ca-cert.p12
              name: kafka-broker-ca-cert
              readOnly: true
              subPath: ca.p12
            - mountPath: /home/smile/smilecdr/classes/client_certificates/kafka-client-cert.p12
              name: kafka-client-cert
              readOnly: true
              subPath: user.p12
            - mountPath: /opt/kafka/classes
              name: admin-classpath
          resources:
            limits:
              cpu: 500m
              memory: 500Mi
            requests:
              cpu: 500m
              memory: 500Mi
      volumes:
        - configMap:
            name: release-name-kafka-admin
          name: kafka-admin
        - name: kafka-broker-ca-cert
          secret:
            secretName: release-name-cluster-ca-cert
        - name: kafka-client-cert
          secret:
            secretName: release-name-kafka-user
        - emptyDir:
            sizeLimit: 20Mi
          name: admin-classpath
      restartPolicy: Always
---
# Source: smilecdr/templates/scdr/scdr-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-scdrnode-masterdev
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: smilecdr
      smilecdr/nodeId: masterdev
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: smilecdr
        helm.sh/chart: No Chart Version - Unit Testing
        smilecdr/nodeId: masterdev
        smilecdr/version: No App Version - Unit Testing
    spec:
      imagePullSecrets:
        []
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
      initContainers:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: smilecdr
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.smilecdr.com/smilecdr:No App Version - Unit Testing"
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "30"]
          startupProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - /bin/grep "Smile, we're up and running! :)" /home/smile/smilecdr/log/smile.log
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 2
            httpGet:
              path: /fhir_request/endpoint-health
              port: 8000
            periodSeconds: 10
            timeoutSeconds: 10
          resources:
            limits:
              memory: 4Gi
            requests:
              cpu: "1"
          env:
            - name: JVMARGS
              value: -server -Xms2048m -Xmx2048m -Djava.io.tmpdir=/home/smile/smilecdr/tmp -Dsun.net.inetaddr.ttl=60
                -Djava.security.egd=file:/dev/./urandom
            - name: KAFKA_BOOTSTRAP_ADDRESS
              value: release-name-kafka-bootstrap:9093
            - name: KAFKA_BROKER_CA_CERT_PWD
              valueFrom:
                secretKeyRef:
                  key: ca.password
                  name: release-name-cluster-ca-cert
            - name: KAFKA_CLIENT_CERT_PWD
              valueFrom:
                secretKeyRef:
                  key: user.password
                  name: release-name-kafka-user
            - name: KAFKA_SSL_ENABLED
              value: "true"
          ports:
            - containerPort: 9000
              name: admin-json
              protocol: TCP
            - containerPort: 9100
              name: admin-web
              protocol: TCP
            - containerPort: 8000
              name: fhir
              protocol: TCP
            - containerPort: 8001
              name: fhirweb
              protocol: TCP
            - containerPort: 8002
              name: pkg-registry
              protocol: TCP
            - containerPort: 9200
              name: smart-auth
              protocol: TCP
          volumeMounts:
            - mountPath: /home/smile/smilecdr/classes/cdr_kafka_config/cdr-kafka-consumer-config.properties
              name: kafka-client-config
              readOnly: true
              subPath: consumer.properties
            - mountPath: /home/smile/smilecdr/classes/cdr_kafka_config/cdr-kafka-producer-config.properties
              name: kafka-client-config
              readOnly: true
              subPath: producer.properties
            - mountPath: /home/smile/smilecdr/classes/client_certificates/kafka-ca-cert.p12
              name: kafka-broker-ca-cert
              readOnly: true
              subPath: ca.p12
            - mountPath: /home/smile/smilecdr/classes/client_certificates/kafka-client-cert.p12
              name: kafka-client-cert
              readOnly: true
              subPath: user.p12
            - mountPath: /home/smile/smilecdr/classes/cdr-config-Master.properties
              name: scdr-config-release-name
              subPath: cdr-config-Master.properties
            - mountPath: /home/smile/smilecdr/bin/smileutil
              name: scdr-smileutil
              subPath: smileutil
            - mountPath: /home/smile/smilecdr/tmp
              name: scdr-volume-tmp
            - mountPath: /home/smile/smilecdr/log
              name: scdr-volume-log
      volumes:
        - configMap:
            name: release-name-kafka-client-properties-masterdev-node
          name: kafka-client-config
        - name: kafka-broker-ca-cert
          secret:
            secretName: release-name-cluster-ca-cert
        - name: kafka-client-cert
          secret:
            secretName: release-name-kafka-user
        - configMap:
            name: release-name-scdrnode-masterdev
          name: scdr-config-release-name
        - configMap:
            defaultMode: 504
            name: release-name-scdrnode-masterdev
          name: scdr-smileutil
        - emptyDir:
            sizeLimit: 1Mi
          name: scdr-volume-tmp
        - emptyDir:
            sizeLimit: 10Gi
          name: scdr-volume-log
      restartPolicy: Always
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/name: smilecdr
            smilecdr/nodeId: masterdev
        matchLabelKeys:
        - pod-template-hash
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/name: smilecdr
            smilecdr/nodeId: masterdev
        matchLabelKeys:
        - pod-template-hash
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
---
# Source: smilecdr/templates/messagebroker/strimzi-kafka-cluster.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: Kafka
metadata:
  name: release-name
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  kafka:
    version: 3.3.1
    replicas: 3
    listeners:
      - name: tls
        port: 9093
        type: internal
        tls: true
        authentication:
          type: tls
    authorization:
      type: simple
      superUsers:
      - CN=release-name-kafka-user
    config:
      auto.create.topics.enable: true
      default.replication.factor: 3
      group.initial.rebalance.delay.ms: 3000
      inter.broker.protocol.version: "3.3"
      min.insync.replicas: 2
      offsets.topic.replication.factor: 3
      transaction.state.log.min.isr: 2
      transaction.state.log.replication.factor: 3
    storage:
      type: jbod
      volumes:
      - id: 0
        type: persistent-claim
        size: 10Gi
        deleteClaim: false
    resources:
      limits:
        memory: 1Gi
      requests:
        cpu: "0.5"
        memory: 1Gi
  zookeeper:
    replicas: 3
    storage:
      type: persistent-claim
      size: 10Gi
      deleteClaim: false
    resources:
      limits:
        memory: 512Mi
      requests:
        cpu: 0.5
        memory: 512Mi
  entityOperator:
    topicOperator: {}
    userOperator: {}
---
# Source: smilecdr/templates/messagebroker/strimzi-kafka-user.yaml
apiVersion: kafka.strimzi.io/v1beta2
kind: KafkaUser
metadata:
  name: release-name-kafka-user
  labels:
    strimzi.io/cluster:  release-name
spec:
  authentication:
    type: tls
  authorization:
    type: simple
    acls:
      # TODO: Scope down the access
      # Will depend on whether topics are auto created or not.
      - resource:
          type: cluster
        operations:
          - All
      # - resource:
      #     type: topic
      #     name: "*"
      #     patternType: literal
      #   operations:
      #     - All
      #     - Read
      #     - Write
      #     - Create
      # - resource:
      #     type: group
      #     name: my-group
      #     patternType: literal
      #   operations:
      #     - Read
---
# Source: smilecdr/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-masterdev-test-connection"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
    smilecdr/nodeId: masterdev
    smilecdr/version: No App Version - Unit Testing
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['release-name-scdrnode-masterdev-fhir:8000']
      resources:
        limits:
          cpu: 10m
          memory: 128Mi
        requests:
          cpu: 10m
          memory: 128Mi
  restartPolicy: Never
