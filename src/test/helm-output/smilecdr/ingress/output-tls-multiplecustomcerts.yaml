---
# Source: smilecdr/templates/scdr/scdr-pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: release-name-scdr
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: smilecdr
---
# Source: smilecdr/templates/certmanager/certmgr-keystore-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-smilecdr-cdrcertificate-tls-keystorepass
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  password: Y2hhbmdlaXQ=
---
# Source: smilecdr/templates/certmanager/certmgr-keystore-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: release-name-smilecdr-fhirwebcertificate-tls-keystorepass
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
type: Opaque
data:
  password: Y3VzdG9tcGFzcw==
---
# Source: smilecdr/templates/scdr/scdr-node-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: release-name-scdr-masterdev-node
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
data:
  cdr-config-Master.properties: |-
    ################################################################################
    # Node Configuration
    ################################################################################
    node.id 	= Masterdev
    node.propertysource 	= PROPERTIES
    node.config.locked 	= true
    node.environment.type 	= DEV
    node.security.strict 	= false

    module.clustermgr.config.messagebroker.type                         =EMBEDDED_ACTIVEMQ

    ################################################################################
    # Other Modules are Configured Below
    ################################################################################

    # The following setting controls where module configuration is ultimately stored.
    # When set to "DATABASE" (which is the default), the clustermgr configuration is
    # always read but the other modules are stored in the database upon the first
    # launch and their configuration is read from the database on subsequent
    # launches. When set to "PROPERTIES", values in this file are always used.
    #
    # In other words, in DATABASE mode, the module definitions below this line are
    # only used to seed the database upon the very first startup of the sytem, and
    # will be ignored after that. In PROPERTIES mode, the module definitions below
    # are read every time the system starts, and existing definitions and config are
    # overwritten by what is in this file.
    #
    ################################################################################
    # ENDPOINT: JSON Admin Services
    ################################################################################
    module.admin_json.type 	= ADMIN_JSON
    module.admin_json.requires.SECURITY_IN_UP 	= local_security
    module.admin_json.config.anonymous.access.enabled 	= true
    module.admin_json.config.context_path 	= /admin_json
    module.admin_json.config.https_forwarding_assumed 	= false
    module.admin_json.config.port 	= 9000
    module.admin_json.config.respect_forward_headers 	= false
    module.admin_json.config.security.http.basic.enabled 	= true
    module.admin_json.config.tls.enabled 	= true
    module.admin_json.config.tls.keystore.file 	= classpath:tls/cdrCertificate-tls-keystore.p12
    module.admin_json.config.tls.keystore.keyalias 	= 1
    module.admin_json.config.tls.keystore.keypass 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.admin_json.config.tls.keystore.password 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.admin_json.config.tls.protocol.cipher_whitelist 	= TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256
    module.admin_json.config.tls.protocol.protocol_whitelist 	= TLSv1.3
    ################################################################################
    # ENDPOINT: Web Admin
    ################################################################################
    module.admin_web.type 	= ADMIN_WEB
    module.admin_web.requires.SECURITY_IN_UP 	= local_security
    module.admin_web.config.context_path 	= /
    module.admin_web.config.https_forwarding_assumed 	= false
    module.admin_web.config.port 	= 9100
    module.admin_web.config.respect_forward_headers 	= false
    module.admin_web.config.tls.enabled 	= true
    module.admin_web.config.tls.keystore.file 	= classpath:tls/cdrCertificate-tls-keystore.p12
    module.admin_web.config.tls.keystore.keyalias 	= 1
    module.admin_web.config.tls.keystore.keypass 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.admin_web.config.tls.keystore.password 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.admin_web.config.tls.protocol.cipher_whitelist 	= TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256
    module.admin_web.config.tls.protocol.protocol_whitelist 	= TLSv1.3
    ################################################################################
    # External Audit DB Config
    ################################################################################
    module.audit.type 	= AUDIT_LOG_PERSISTENCE
    module.audit.config.db.driver 	= POSTGRES_9_4
    module.audit.config.db.password 	= #{env['DB_PASS']}
    module.audit.config.db.schema_update_mode 	= UPDATE
    module.audit.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.audit.config.db.username 	= #{env['DB_USER']}
    ################################################################################
    # Cluster Manager Configuration
    ################################################################################
    module.clustermgr.config.audit_log.db.always_write_to_clustermgr 	= false
    module.clustermgr.config.audit_log.request_headers_to_store 	= Content-Type,Host
    module.clustermgr.config.db.driver 	= POSTGRES_9_4
    module.clustermgr.config.db.password 	= #{env['DB_PASS']}
    module.clustermgr.config.db.schema_update_mode 	= UPDATE
    module.clustermgr.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.clustermgr.config.db.username 	= #{env['DB_USER']}
    module.clustermgr.config.retain_transaction_log_days 	= 7
    module.clustermgr.config.seed_keystores.file 	= classpath:/config_seeding/keystores.json
    module.clustermgr.config.stats.heartbeat_persist_frequency_ms 	= 15000
    module.clustermgr.config.stats.stats_cleanup_frequency_ms 	= 300000
    module.clustermgr.config.stats.stats_persist_frequency_ms 	= 60000
    module.clustermgr.config.transactionlog.enabled 	= false
    ################################################################################
    # ENDPOINT: FHIR Service
    ################################################################################
    module.fhir_endpoint.type 	= ENDPOINT_FHIR_REST
    module.fhir_endpoint.requires.PERSISTENCE_ALL 	= persistence
    module.fhir_endpoint.requires.SECURITY_IN_UP 	= local_security
    module.fhir_endpoint.config.anonymous.access.enabled 	= true
    module.fhir_endpoint.config.base_url.fixed 	= https://smilecdr-example.local/fhir_request
    module.fhir_endpoint.config.browser_highlight.enabled 	= true
    module.fhir_endpoint.config.context_path 	= /fhir_request
    module.fhir_endpoint.config.cors.enable 	= true
    module.fhir_endpoint.config.default_encoding 	= JSON
    module.fhir_endpoint.config.default_pretty_print 	= true
    module.fhir_endpoint.config.https_forwarding_assumed 	= false
    module.fhir_endpoint.config.port 	= 8000
    module.fhir_endpoint.config.request_validating.enabled 	= false
    module.fhir_endpoint.config.request_validating.fail_on_severity 	= ERROR
    module.fhir_endpoint.config.request_validating.require_explicit_profile_definition.enabled 	= false
    module.fhir_endpoint.config.request_validating.response_headers.enabled 	= false
    module.fhir_endpoint.config.request_validating.tags.enabled 	= false
    module.fhir_endpoint.config.respect_forward_headers 	= false
    module.fhir_endpoint.config.security.http.basic.enabled 	= true
    module.fhir_endpoint.config.threadpool.max 	= 10
    module.fhir_endpoint.config.threadpool.min 	= 2
    module.fhir_endpoint.config.tls.enabled 	= true
    module.fhir_endpoint.config.tls.keystore.file 	= classpath:tls/cdrCertificate-tls-keystore.p12
    module.fhir_endpoint.config.tls.keystore.keyalias 	= 1
    module.fhir_endpoint.config.tls.keystore.keypass 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.fhir_endpoint.config.tls.keystore.password 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.fhir_endpoint.config.tls.protocol.cipher_whitelist 	= TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256
    module.fhir_endpoint.config.tls.protocol.protocol_whitelist 	= TLSv1.3
    ################################################################################
    # ENDPOINT: FHIRWeb Console
    ################################################################################
    module.fhirweb_endpoint.type 	= ENDPOINT_FHIRWEB
    module.fhirweb_endpoint.requires.ENDPOINT_FHIR 	= fhir_endpoint
    module.fhirweb_endpoint.requires.SECURITY_IN_UP 	= local_security
    module.fhirweb_endpoint.config.anonymous.access.enabled 	= false
    module.fhirweb_endpoint.config.context_path 	= /fhirweb
    module.fhirweb_endpoint.config.https_forwarding_assumed 	= false
    module.fhirweb_endpoint.config.port 	= 8001
    module.fhirweb_endpoint.config.respect_forward_headers 	= false
    module.fhirweb_endpoint.config.threadpool.max 	= 10
    module.fhirweb_endpoint.config.threadpool.min 	= 2
    module.fhirweb_endpoint.config.tls.enabled 	= true
    module.fhirweb_endpoint.config.tls.keystore.file 	= classpath:tls/fhirWebCertificate-tls-keystore.p12
    module.fhirweb_endpoint.config.tls.keystore.keyalias 	= 1
    module.fhirweb_endpoint.config.tls.keystore.keypass 	= #{env['FHIRWEBCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.fhirweb_endpoint.config.tls.keystore.password 	= #{env['FHIRWEBCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.fhirweb_endpoint.config.tls.protocol.cipher_whitelist 	= TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256
    module.fhirweb_endpoint.config.tls.protocol.protocol_whitelist 	= TLSv1.3
    ################################################################################
    # license
    ################################################################################
    module.license.type 	= LICENSE
    ################################################################################
    # Local Storage Inbound Security
    ################################################################################
    module.local_security.type 	= SECURITY_IN_LOCAL
    module.local_security.config.password_encoding_type 	= BCRYPT_12_ROUND
    module.local_security.config.seed.users.file 	= classpath:/config_seeding/users.json
    ################################################################################
    # ENDPOINT: Package Registry
    ################################################################################
    module.package_registry.type 	= ENDPOINT_PACKAGE_REGISTRY
    module.package_registry.requires.PACKAGE_CACHE 	= persistence
    module.package_registry.requires.SECURITY_IN_UP 	= local_security
    module.package_registry.config.anonymous.access.enabled 	= true
    module.package_registry.config.context_path 	= /package_registry
    module.package_registry.config.https_forwarding_assumed 	= false
    module.package_registry.config.port 	= 8002
    module.package_registry.config.respect_forward_headers 	= false
    module.package_registry.config.security.http.basic.enabled 	= true
    module.package_registry.config.tls.enabled 	= true
    module.package_registry.config.tls.keystore.file 	= classpath:tls/cdrCertificate-tls-keystore.p12
    module.package_registry.config.tls.keystore.keyalias 	= 1
    module.package_registry.config.tls.keystore.keypass 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.package_registry.config.tls.keystore.password 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.package_registry.config.tls.protocol.cipher_whitelist 	= TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256
    module.package_registry.config.tls.protocol.protocol_whitelist 	= TLSv1.3
    ################################################################################
    # Database Configuration
    ################################################################################
    module.persistence.type 	= PERSISTENCE_R4
    module.persistence.config.dao_config.allow_external_references.enabled 	= false
    module.persistence.config.dao_config.allow_inline_match_url_references.enabled 	= true
    module.persistence.config.dao_config.allow_multiple_delete.enabled 	= false
    module.persistence.config.dao_config.expire_search_results_after_minutes 	= 60
    module.persistence.config.db.driver 	= POSTGRES_9_4
    module.persistence.config.db.hibernate.showsql 	= false
    module.persistence.config.db.hibernate_search.directory 	= ./database/lucene_fhir_persistence
    module.persistence.config.db.password 	= #{env['DB_PASS']}
    module.persistence.config.db.schema_update_mode 	= UPDATE
    module.persistence.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.persistence.config.db.username 	= #{env['DB_USER']}
    ################################################################################
    # ENDPOINT: SMART Security
    ################################################################################
    module.smart_auth.type 	= SECURITY_OUT_SMART
    module.smart_auth.requires.CLUSTERMGR 	= clustermgr
    module.smart_auth.requires.SECURITY_IN_UP 	= local_security
    module.smart_auth.config.context_path 	= /smartauth
    module.smart_auth.config.https_forwarding_assumed 	= false
    module.smart_auth.config.issuer.url 	= https://smilecdr-example.local/smartauth
    module.smart_auth.config.openid.signing.keystore_id 	= default-keystore
    module.smart_auth.config.port 	= 9200
    module.smart_auth.config.respect_forward_headers 	= false
    module.smart_auth.config.tls.enabled 	= true
    module.smart_auth.config.tls.keystore.file 	= classpath:tls/cdrCertificate-tls-keystore.p12
    module.smart_auth.config.tls.keystore.keyalias 	= 1
    module.smart_auth.config.tls.keystore.keypass 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.smart_auth.config.tls.keystore.password 	= #{env['CDRCERTIFICATE_TLS_KEYSTORE_PASS']}
    module.smart_auth.config.tls.protocol.cipher_whitelist 	= TLS_AES_128_GCM_SHA256,TLS_AES_256_GCM_SHA384,TLS_CHACHA20_POLY1305_SHA256
    module.smart_auth.config.tls.protocol.protocol_whitelist 	= TLSv1.3
    ################################################################################
    # Subscription
    ################################################################################
    module.subscription.type 	= SUBSCRIPTION_MATCHER
    module.subscription.requires.PERSISTENCE_ALL 	= persistence
    ################################################################################
    # External Transaction Log DB
    ################################################################################
    module.transaction.type 	= TRANSACTION_LOG_PERSISTENCE
    module.transaction.config.db.driver 	= POSTGRES_9_4
    module.transaction.config.db.password 	= #{env['DB_PASS']}
    module.transaction.config.db.schema_update_mode 	= UPDATE
    module.transaction.config.db.url 	= jdbc:postgresql://#{env['DB_URL']}:#{env['DB_PORT']}/#{env['DB_DATABASE']}?sslmode=require
    module.transaction.config.db.username 	= #{env['DB_USER']}


  smileutil: |-
    #!/bin/bash

    # ----------------------------------------------------------------------------
    # CDR CLI Tool for use in Helm Chart deployment
    #

    # CDR home directory is hard coded as this is not configurable with the Helm Chart deployment method.
    CDRDIR=/home/smile/smilecdr/

    # Change the working directory to the CDR home directory
    cd $CDRDIR

    # Build the classpath
    CLASSPATH="$CDRDIR/classes:$CDRDIR/lib/*:$CDRDIR/customerlib/*"

    # Unset JAVA_TOOL_OPTIONS as it will cause failure if it includes any listeners (i.e. for JMX agent)
    unset JAVA_TOOL_OPTIONS

    JAVA_CMD="java $JAVA_OPTS -cp $CLASSPATH -Dsmile.basedir=$CDRDIR -Djava.io.tmpdir=$CDRDIR/tmp ca.cdr.cli.App $*"
    $JAVA_CMD
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdr-svc-admin-json
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: admin-json
      port: 9000
      targetPort: 9000
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdr-svc-admin-web
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: admin-web
      port: 9100
      targetPort: 9100
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdr-svc-fhir
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: fhir
      port: 8000
      targetPort: 8000
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdr-svc-fhirweb
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: fhirweb
      port: 8001
      targetPort: 8001
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdr-svc-pkg-registry
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: pkg-registry
      port: 8002
      targetPort: 8002
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
---
# Source: smilecdr/templates/scdr/scdr-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-scdr-svc-smart-auth
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
  annotations:
    {}
spec:
  type: ClusterIP
  ports:
    - name: smart-auth
      port: 9200
      targetPort: 9200
      protocol: TCP
  selector:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: smilecdr
---
# Source: smilecdr/templates/scdr/scdr-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-scdr
  namespace: default
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: smilecdr
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  template:
    metadata:
      labels:
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: smilecdr
        helm.sh/chart: No Chart Version - Unit Testing
    spec:
      imagePullSecrets:
        []
      serviceAccountName: default
      securityContext:
        fsGroup: 1000
      initContainers:
        []
      terminationGracePeriodSeconds: 60
      containers:
        - name: smilecdr
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            runAsUser: 1000
          image: "docker.smilecdr.com/smilecdr:No App Version - Unit Testing"
          imagePullPolicy: IfNotPresent
          lifecycle:
            preStop:
              exec:
                command: ["sleep", "30"]
          startupProbe:
            exec:
              command:
              - /bin/sh
              - -c
              - /bin/grep "Smile, we're up and running! :)" /home/smile/smilecdr/log/smile.log
            failureThreshold: 30
            periodSeconds: 10
          readinessProbe:
            failureThreshold: 2
            httpGet:
              httpHeaders:
              - name: Host
                value: smilecdr-example.local
              path: /fhir_request/endpoint-health
              port: 8000
              scheme: HTTPS
            periodSeconds: 10
            timeoutSeconds: 10
          resources:
            limits:
              memory: 4Gi
            requests:
              cpu: "1"
          env:
            - name: CDRCERTIFICATE_TLS_KEYSTORE_PASS
              valueFrom:
                secretKeyRef:
                  key: password
                  name: release-name-smilecdr-cdrcertificate-tls-keystorepass
            - name: FHIRWEBCERTIFICATE_TLS_KEYSTORE_PASS
              valueFrom:
                secretKeyRef:
                  key: password
                  name: release-name-smilecdr-fhirwebcertificate-tls-keystorepass
            - name: JVMARGS
              value: -server -Xms2048m -Xmx2048m -Djava.io.tmpdir=/home/smile/smilecdr/tmp -Dsun.net.inetaddr.ttl=60
                -Djava.security.egd=file:/dev/./urandom
          ports:
            - containerPort: 9000
              name: admin-json
              protocol: TCP
            - containerPort: 9100
              name: admin-web
              protocol: TCP
            - containerPort: 8000
              name: fhir
              protocol: TCP
            - containerPort: 8001
              name: fhirweb
              protocol: TCP
            - containerPort: 8002
              name: pkg-registry
              protocol: TCP
            - containerPort: 9200
              name: smart-auth
              protocol: TCP
          volumeMounts:
            - mountPath: /home/smile/smilecdr/classes/tls/cdrCertificate-tls-keystore.p12
              name: cdrCertificate-tls-keystore
              readOnly: true
              subPath: cdrCertificate-tls-keystore.p12
            - mountPath: /home/smile/smilecdr/classes/tls/fhirWebCertificate-tls-keystore.p12
              name: fhirWebCertificate-tls-keystore
              readOnly: true
              subPath: fhirWebCertificate-tls-keystore.p12
            - mountPath: /home/smile/smilecdr/classes/cdr-config-Master.properties
              name: scdr-config-release-name
              subPath: cdr-config-Master.properties
            - mountPath: /home/smile/smilecdr/bin/smileutil
              name: scdr-smileutil
              subPath: smileutil
            - mountPath: /home/smile/smilecdr/tmp
              name: scdr-volume-tmp
            - mountPath: /home/smile/smilecdr/log
              name: scdr-volume-log
            - mountPath: /home/smile/smilecdr/activemq-data
              name: scdr-volume-amq
      volumes:
        - name: cdrCertificate-tls-keystore
          secret:
            items:
            - key: keystore.p12
              path: cdrCertificate-tls-keystore.p12
            secretName: release-name-cdrcertificate-tls
        - name: fhirWebCertificate-tls-keystore
          secret:
            items:
            - key: keystore.p12
              path: fhirWebCertificate-tls-keystore.p12
            secretName: release-name-fhirwebcertificate-tls
        - configMap:
            name: release-name-scdr-masterdev-node
          name: scdr-config-release-name
        - configMap:
            defaultMode: 504
            name: release-name-scdr-masterdev-node
          name: scdr-smileutil
        - emptyDir:
            sizeLimit: 1Mi
          name: scdr-volume-tmp
        - emptyDir:
            sizeLimit: 10Gi
          name: scdr-volume-log
        - emptyDir:
            sizeLimit: 10Mi
          name: scdr-volume-amq
      restartPolicy: Always
      topologySpreadConstraints:
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/name: smilecdr
        matchLabelKeys:
        - pod-template-hash
        maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
      - labelSelector:
          matchLabels:
            app.kubernetes.io/instance: release-name
            app.kubernetes.io/name: smilecdr
        matchLabelKeys:
        - pod-template-hash
        maxSkew: 1
        topologyKey: kubernetes.io/hostname
        whenUnsatisfiable: ScheduleAnyway
---
# Source: smilecdr/templates/scdr/scdr-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-scdr
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
  annotations:
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    nginx.ingress.kubernetes.io/configuration-snippet: proxy_ssl_protocols TLSv1.3;
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
spec:
  ingressClassName: nginx
  rules:
    - host: smilecdr-example.local
      http:
        paths:
        - backend:
            service:
              name: release-name-scdr-svc-admin-json
              port:
                number: 9000
          path: /admin_json
          pathType: Prefix
        - backend:
            service:
              name: release-name-scdr-svc-admin-web
              port:
                number: 9100
          path: /
          pathType: Prefix
        - backend:
            service:
              name: release-name-scdr-svc-fhir
              port:
                number: 8000
          path: /fhir_request
          pathType: Prefix
        - backend:
            service:
              name: release-name-scdr-svc-fhirweb
              port:
                number: 8001
          path: /fhirweb
          pathType: Prefix
        - backend:
            service:
              name: release-name-scdr-svc-pkg-registry
              port:
                number: 8002
          path: /package_registry
          pathType: Prefix
        - backend:
            service:
              name: release-name-scdr-svc-smart-auth
              port:
                number: 9200
          path: /smartauth
          pathType: Prefix
---
# Source: smilecdr/templates/certmanager/certmgr-certificate.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: release-name-cdrcertificate
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  dnsNames:
  - smilecdr-example.local
  - '*.default.svc.cluster.local'
  - localhost
  - release-name-scdr-svc-admin-json.default.svc.cluster.local
  - release-name-scdr-svc-admin-json.default.svc
  - release-name-scdr-svc-admin-json.default
  - release-name-scdr-svc-admin-json
  - release-name-scdr-svc-admin-web.default.svc.cluster.local
  - release-name-scdr-svc-admin-web.default.svc
  - release-name-scdr-svc-admin-web.default
  - release-name-scdr-svc-admin-web
  - release-name-scdr-svc-fhir.default.svc.cluster.local
  - release-name-scdr-svc-fhir.default.svc
  - release-name-scdr-svc-fhir.default
  - release-name-scdr-svc-fhir
  - release-name-scdr-svc-pkg-registry.default.svc.cluster.local
  - release-name-scdr-svc-pkg-registry.default.svc
  - release-name-scdr-svc-pkg-registry.default
  - release-name-scdr-svc-pkg-registry
  - release-name-scdr-svc-smart-auth.default.svc.cluster.local
  - release-name-scdr-svc-smart-auth.default.svc
  - release-name-scdr-svc-smart-auth.default
  - release-name-scdr-svc-smart-auth
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: release-name-default-ca
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        key: password
        name: release-name-smilecdr-cdrcertificate-tls-keystorepass
  secretName: release-name-cdrcertificate-tls
---
# Source: smilecdr/templates/certmanager/certmgr-certificate.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: release-name-default-ca
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  commonName: release-name-default-ca-cluster-local-signing-authority
  isCA: true
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: release-name-default-ca-root
  privateKey:
    algorithm: ECDSA
    size: 256
  secretName: release-name-default-ca-tls
---
# Source: smilecdr/templates/certmanager/certmgr-certificate.yaml
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: release-name-fhirwebcertificate
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  dnsNames:
  - myoverriddenhost.mycompany.com
  - extrahost1.extrahostname.com
  - extrahost2.extrahostname.com
  - release-name-scdr-svc-fhirweb.default.svc.cluster.local
  - release-name-scdr-svc-fhirweb.default.svc
  - release-name-scdr-svc-fhirweb.default
  - release-name-scdr-svc-fhirweb
  issuerRef:
    group: cert-manager.io
    kind: Issuer
    name: release-name-default-ca
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        key: password
        name: release-name-smilecdr-fhirwebcertificate-tls-keystorepass
  secretName: release-name-fhirwebcertificate-tls
---
# Source: smilecdr/templates/certmanager/certmgr-issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: release-name-default-ca
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  ca:
    secretName: release-name-default-ca-tls
---
# Source: smilecdr/templates/certmanager/certmgr-issuer.yaml
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: release-name-default-ca-root
  namespace: default
  labels:
    helm.sh/chart: No Chart Version - Unit Testing
    app.kubernetes.io/name: smilecdr
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
spec:
  selfSigned: {}
---
# Source: smilecdr/templates/tests/test-connection.yaml
apiVersion: v1
kind: Pod
metadata:
  name: "release-name-smilecdr-test-connection"
  labels:
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: smilecdr
    helm.sh/chart: No Chart Version - Unit Testing
  annotations:
    "helm.sh/hook": test
spec:
  containers:
    - name: wget
      image: busybox
      command: ['wget']
      args: ['smilecdr-admin_web:9100']
      resources:
        limits:
          cpu: 10m
          memory: 128Mi
        requests:
          cpu: 10m
          memory: 128Mi
  restartPolicy: Never
