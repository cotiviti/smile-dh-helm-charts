---
# Source: pmp/templates/component-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-pmp-pmp-services
  labels:
    app.kubernetes.io/component: pmpServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
---
# Source: pmp/templates/component-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: release-name-pmp-pmp-user-services
  labels:
    app.kubernetes.io/component: pmpUserServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
---
# Source: pmp/templates/component-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pmp-member-portal
  labels:
    app.kubernetes.io/component: memberPortal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: memberPortal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: pmp
---
# Source: pmp/templates/component-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pmp-member-portal-admin
  labels:
    app.kubernetes.io/component: memberPortalAdmin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: memberPortalAdmin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: pmp
---
# Source: pmp/templates/component-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pmp-pmp-aws-login
  labels:
    app.kubernetes.io/component: pmpAwsLogin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: pmpAwsLogin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: pmp
---
# Source: pmp/templates/component-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pmp-pmp-services
  labels:
    app.kubernetes.io/component: pmpServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: pmpServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: pmp
---
# Source: pmp/templates/component-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: release-name-pmp-pmp-user-services
  labels:
    app.kubernetes.io/component: pmpUserServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  type: ClusterIP
  ports:
    - port: 3000
      targetPort: 3000
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/component: pmpUserServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/name: pmp
---
# Source: pmp/templates/component-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pmp-member-portal
  labels:
    app.kubernetes.io/component: memberPortal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memberPortal
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: pmp
  template:
    metadata:
      labels:
        app.kubernetes.io/component: memberPortal
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/name: pmp
    spec:
      imagePullSecrets:
      - name: release-name-pmp-memberPortal-image-pull-secrets
      serviceAccountName: default
      securityContext:
        {}
      enableServiceLinks: false
      containers:
      - name: pmp
        securityContext:
          {}
        image: <YOU MUST DEFINE A REPO IN YOUR VALUES FILE>:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: PUBLIC_URL
          value: https://pmp-example.local
        - name: CONTEXT_ROOT
          value: /member-portal/
        - name: LISTEN_PORT
          value: "80"
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /member-portal/
            port: http
        readinessProbe:
          httpGet:
            path: /member-portal/
            port: http
        resources:
            {}
        volumeMounts:
        - mountPath: /mnt/sscsi
          name: release-name-pmp-memberPortal
          readOnly: true
      volumes:
      - csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: release-name-pmp-memberPortal
        name: release-name-pmp-memberPortal
---
# Source: pmp/templates/component-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pmp-member-portal-admin
  labels:
    app.kubernetes.io/component: memberPortalAdmin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: memberPortalAdmin
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: pmp
  template:
    metadata:
      labels:
        app.kubernetes.io/component: memberPortalAdmin
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/name: pmp
    spec:
      serviceAccountName: default
      securityContext:
        {}
      enableServiceLinks: false
      containers:
      - name: pmp
        securityContext:
          {}
        image: <YOU MUST DEFINE A REPO IN YOUR VALUES FILE>:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: PUBLIC_URL
          value: https://pmp-example.local
        - name: CONTEXT_ROOT
          value: /admin/member-portal/
        - name: LISTEN_PORT
          value: "80"
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /admin/member-portal/
            port: http
        readinessProbe:
          httpGet:
            path: /admin/member-portal/
            port: http
        resources:
            {}
---
# Source: pmp/templates/component-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pmp-pmp-aws-login
  labels:
    app.kubernetes.io/component: pmpAwsLogin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: pmpAwsLogin
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: pmp
  template:
    metadata:
      labels:
        app.kubernetes.io/component: pmpAwsLogin
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/name: pmp
    spec:
      imagePullSecrets:
      - name: pmp-global-image-pull-secrets
      serviceAccountName: default
      securityContext:
        {}
      enableServiceLinks: false
      containers:
      - name: pmp
        securityContext:
          {}
        image: <YOU MUST DEFINE A REPO IN YOUR VALUES FILE>:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: PUBLIC_URL
          value: https://pmp-example.local
        - name: CONTEXT_ROOT
          value: /pmp-aws-login
        - name: LISTEN_PORT
          value: "80"
        ports:
        - name: http
          containerPort: 80
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /pmp-aws-login
            port: http
        readinessProbe:
          httpGet:
            path: /pmp-aws-login
            port: http
        resources:
            {}
---
# Source: pmp/templates/component-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pmp-pmp-services
  labels:
    app.kubernetes.io/component: pmpServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: pmpServices
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: pmp
  template:
    metadata:
      labels:
        app.kubernetes.io/component: pmpServices
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/name: pmp
    spec:
      imagePullSecrets:
      - name: release-name-pmp-pmpServices-image-pull-secrets
      serviceAccountName: release-name-pmp-pmp-services
      securityContext:
        {}
      enableServiceLinks: false
      containers:
      - name: pmp
        securityContext:
          {}
        image: <YOU MUST DEFINE A REPO IN YOUR VALUES FILE>:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: PUBLIC_URL
          value: https://pmp-services-example.local
        - name: CONTEXT_ROOT
          value: /Registration
        - name: LISTEN_PORT
          value: "3000"
        - name: resourceProviderURI
          value: http://release-name-scdr-svc-fhir:8000/fhir_request
        - name: password
          valueFrom:
            secretKeyRef:
              key: password
              name: release-name-pmp-pmpServices
        - name: userid
          valueFrom:
            secretKeyRef:
              key: userid
              name: release-name-pmp-pmpServices
        - name: IDENTIFIER_SYSTEM_MEMBER
          value: urn:system:member
        - name: IDENTIFIER_SYSTEM_PERSONALREP
          value: urn:system:pr
        - name: checkActiveCoverage
          value: "false"
        - name: checkCoverageWithinXDays
          value: "0"
        - name: coverageDateFormat
          value: YYYY-MM-DD
        - name: env
          value: AWS
        - name: mdmEnabled
          value: "false"
        - name: uniquememberidentifier
          value: memberidentifier
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /Registration
            port: http
        readinessProbe:
          httpGet:
            path: /Registration
            port: http
        resources:
            {}
        volumeMounts:
        - mountPath: '%!s(<nil>)/%!s(<nil>)'
          name: config-json
          subPath: null
        - mountPath: /mnt/sscsi
          name: release-name-pmp-pmpServices
          readOnly: true
      volumes:
      - configMap:
          name: null
        name: config-json
      - csi:
          driver: secrets-store.csi.k8s.io
          readOnly: true
          volumeAttributes:
            secretProviderClass: release-name-pmp-pmpServices
        name: release-name-pmp-pmpServices
---
# Source: pmp/templates/component-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: release-name-pmp-pmp-user-services
  labels:
    app.kubernetes.io/component: pmpUserServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: pmpUserServices
      app.kubernetes.io/instance: release-name
      app.kubernetes.io/name: pmp
  template:
    metadata:
      labels:
        app.kubernetes.io/component: pmpUserServices
        app.kubernetes.io/instance: release-name
        app.kubernetes.io/name: pmp
    spec:
      imagePullSecrets:
      - name: pmp-global-image-pull-secrets
      serviceAccountName: release-name-pmp-pmp-user-services
      securityContext:
        {}
      enableServiceLinks: false
      containers:
      - name: pmp
        securityContext:
          {}
        image: <YOU MUST DEFINE A REPO IN YOUR VALUES FILE>:latest
        imagePullPolicy: IfNotPresent
        env:
        - name: PUBLIC_URL
          value: https://pmp-user-services-example.local
        - name: CONTEXT_ROOT
          value: /
        - name: LISTEN_PORT
          value: "3000"
        - name: authJwksUrl
          value: testing
        - name: authAuthority
          value: testing
        - name: authClientId
          value: testing
        - name: awsCognitoUserPoolId
          value: testing
        - name: authGroupAuthorized
          value: admins
        - name: authGroupKeyName
          value: cognito:groups
        - name: authOnUserQueryEnabled
          value: "true"
        - name: authSupportedAlgorithms
          value: HS256,RS256
        - name: awsCognitoMemberIdKey
          value: custom:memberId
        - name: awsCognitoPatientIdKey
          value: custom:patientId
        - name: awsCognitoPersonIdKey
          value: custom:personalRepId
        - name: awsCognitoQueryFilterGivenName
          value: given_name ^= "{firstName}"
        - name: awsCognitoQueryFilterSurname
          value: family_name ^= "{lastName}"
        - name: awsCognitoQueryGroups
          value: testers,admins
        - name: awsRegion
          value: us-east-1
        - name: queryType
          value: AWS_COGNITO
        ports:
        - name: http
          containerPort: 3000
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /status
            port: http
        readinessProbe:
          httpGet:
            path: /status
            port: http
        resources:
            {}
        volumeMounts:
        - mountPath: '%!s(<nil>)/%!s(<nil>)'
          name: config-json
          subPath: null
      volumes:
      - configMap:
          name: null
        name: config-json
---
# Source: pmp/templates/component-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-pmp-member-portal
  labels:
    app.kubernetes.io/component: memberPortal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  rules:
    - host: "pmp-example.local"
      http:
        paths:
          - path: /member-portal/
            pathType: Prefix
            backend:
              service:
                name: release-name-pmp-member-portal
                port:
                  number: 80
---
# Source: pmp/templates/component-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-pmp-member-portal-admin
  labels:
    app.kubernetes.io/component: memberPortalAdmin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  rules:
    - host: "pmp-example.local"
      http:
        paths:
          - path: /admin/member-portal/
            pathType: Prefix
            backend:
              service:
                name: release-name-pmp-member-portal-admin
                port:
                  number: 80
---
# Source: pmp/templates/component-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-pmp-pmp-aws-login
  labels:
    app.kubernetes.io/component: pmpAwsLogin
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  rules:
    - host: "pmp-example.local"
      http:
        paths:
          - path: /pmp-aws-login
            pathType: Prefix
            backend:
              service:
                name: release-name-pmp-pmp-aws-login
                port:
                  number: 80
---
# Source: pmp/templates/component-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-pmp-pmp-services
  labels:
    app.kubernetes.io/component: pmpServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  rules:
    - host: "pmp-services-example.local"
      http:
        paths:
          - path: /Registration
            pathType: Prefix
            backend:
              service:
                name: release-name-pmp-pmp-services
                port:
                  number: 3000
---
# Source: pmp/templates/component-ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: release-name-pmp-pmp-user-services
  labels:
    app.kubernetes.io/component: pmpUserServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
spec:
  rules:
    - host: "pmp-user-services-example.local"
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: release-name-pmp-pmp-user-services
                port:
                  number: 3000
---
# Source: pmp/templates/component-secret-provider-class.yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: release-name-pmp-memberportal
  labels:
    app.kubernetes.io/component: memberPortal
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
  namespace: default
spec:
  provider: "aws"
  parameters:
    objects: |
      - jmesPath:
        - objectAlias: release-name-pmp-memberPortal-image-pull-secrets
          path: .dockerconfigjson
        objectAlias: release-name-pmp-memberPortal-image-pull-secrets
        objectName: arn:aws:secretsmanager:aws-region:1234567890:secret:my-memberportal-only-image-pull-secret
  secretObjects:
  - data:
    - key: .dockerconfigjson
      objectName: release-name-pmp-memberPortal-image-pull-secrets
    secretName: release-name-pmp-memberPortal-image-pull-secrets
    type: kubernetes.io/dockerconfigjson
---
# Source: pmp/templates/component-secret-provider-class.yaml
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: release-name-pmp-pmpservices
  labels:
    app.kubernetes.io/component: pmpServices
    app.kubernetes.io/instance: release-name
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: pmp
    app.kubernetes.io/version: 0.1.0
  namespace: default
spec:
  provider: "aws"
  parameters:
    objects: |
      - jmesPath:
        - objectAlias: release-name-pmp-pmpServices-image-pull-secrets
          path: .dockerconfigjson
        objectAlias: release-name-pmp-pmpServices-image-pull-secrets
        objectName: arn:aws:secretsmanager:aws-region:1234567890:secret:my-pmpServices-image-pull-secret
      - jmesPath:
        - objectAlias: password
          path: password
        - objectAlias: userid
          path: userid
        objectAlias: release-name-pmp-pmpServices
        objectName: arn:aws:secretsmanager:aws-region:1234567890:secret:my-pmpServices-app-secret
  secretObjects:
  - data:
    - key: .dockerconfigjson
      objectName: release-name-pmp-pmpServices-image-pull-secrets
    secretName: release-name-pmp-pmpServices-image-pull-secrets
    type: kubernetes.io/dockerconfigjson
  - data:
    - key: password
      objectName: password
    - key: userid
      objectName: userid
    secretName: release-name-pmp-pmpServices
    type: Opaque
