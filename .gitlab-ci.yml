# This GitLab CI file will do the following to ensure adherence to the SDLC for Helm Chart development at Smile Digital Health

variables:
  RELEASE_BRANCHES_PATTERN: '/^(main)$/'
  PRE_RELEASE_BRANCHES_PATTERN: '/^(next|pre|beta|alpha)$/'
  ALL_RELEASE_BRANCHES_PATTERN: '/^(main|next|pre|beta|alpha)$/'
  # Used to match against the auto-release commit. Used throughout, but there may be another way.
  RELEASE_COMMIT_MESSAGE: '/^chore\(auto-(pre)?release\)/'

workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    - if: $CI_COMMIT_BEFORE_SHA == "0000000000000000000000000000000000000000"
      when: never
    - if: $CI_COMMIT_BRANCH
    # We can try tags again later on...
    # - if: $CI_COMMIT_BRANCH

stages:
- validate        # Run commit message checking, check for default tests
- test            # Run linters, unit tests, outut compare, docs, etc
- release
- package         # Package the Helm Charts
- publish          # Deploy to Package Registry

commit-check:
  stage: validate
  tags:
    - helm-ci
  image:
    name: commitizen/commitizen:2.37.0
  script:
    - export
    - cz check --rev-range HEAD

# default-tests-check-job:
#   stage: validate
#   tags:
#     - helm-ci
#   script:
#     - echo "Checking for default tests..."

helm-lint:
  stage: test
  tags:
    - helm-ci
  image:
    name: alpine/helm:3.10.1
    entrypoint: ["sh", "-c"]
  before_script:
    - apk add bash
  script:
    - echo "Linting Charts..."
    - ./scripts/lint-charts.sh ./src

helm-unit-test:
  stage: test
  tags:
    - helm-ci
  image:
    name: alpine/helm:3.10.1
    entrypoint: ["sh", "-c"]
  before_script:
    - apk add bash
  script:
    - echo "Running Helm unit tests..."

helm-output-check:
  stage: test
  tags:
    - helm-ci
  image:
    name: alpine/helm:3.10.1
    entrypoint: ["sh", "-c"]
  before_script:
    - apk add bash jq
    - curl --silent --location https://git.io/JYfAY | bash
  script:
    - echo "Checking Helm outputs..."
    - ./scripts/check-outputs.sh ${CI_PROJECT_DIR}/src

helm-docs-check:
  stage: test
  tags:
    - helm-ci
  image:
    name: jnorwood/helm-docs:v1.11.0
    entrypoint: ["sh", "-c"]
  script:
    - helm-docs
      --chart-search-root=${CI_PROJECT_DIR}/src/main/charts
      --template-files=./_templates.gotmpl
      --template-files=README.md.gotmpl

helm-package:
  stage: package
  tags:
    - helm-ci
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_REF_NAME =~ $ALL_RELEASE_BRANCHES_PATTERN && $CI_COMMIT_MESSAGE =~ $RELEASE_COMMIT_MESSAGE
  image:
    name: alpine/helm:3.10.1
    entrypoint: ["sh", "-c"]
  script:
    - echo "Packaging Helm Charts..."
    - helm package src/main/charts/*
  artifacts:
    paths:
      - "*.tgz"
    expire_in: 1 week

publish:
  stage: publish  # It only runs when *both* jobs in the test stage complete successfully.
  tags:
    - helm-ci
  image:
    name: alpine
    # entrypoint: ["sh", "-c"]
  rules:
    - if: $CI_PIPELINE_SOURCE == 'merge_request_event'
      when: never
    - if: $CI_COMMIT_REF_NAME =~ $ALL_RELEASE_BRANCHES_PATTERN && $CI_COMMIT_MESSAGE =~ $RELEASE_COMMIT_MESSAGE
  before_script:
    - apk add bash curl
    # - 'helm repo add --username gitlab-ci-token --password ${CI_JOB_TOKEN} ${CI_PROJECT_NAME} ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/devel'
    # - 'helm plugin install https://github.com/chartmuseum/helm-push.git'
  script:
    - echo "Deploying application..."
    - scripts/publish-charts.sh gitlab-ci-token:$CI_JOB_TOKEN ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api devel *.tgz
    # - 'curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/devel/charts"'
    - echo "Application successfully deployed."

pre-release:
  stage: release
  tags:
  - helm-ci
  image:
    name: node:19-alpine
    entrypoint: ["sh", "-c"]
  variables:
    GIT_AUTHOR_NAME: smile-release-bot
    GIT_AUTHOR_EMAIL: smile-release-bot@smilecdr.com
    GIT_COMMITTER_NAME: smile-release-bot
    GIT_COMMITTER_EMAIL: smile-release-bot@smilecdr.com
  before_script:
    - apk add bash curl jq git
    # Install helm & dyff as they are needed in check outputs script.
    - curl --silent --location https://get.helm.sh/helm-v3.10.1-linux-$(scripts/get-alpine-arch.sh helm).tar.gz | tar -xvzf - -C /usr/local/bin linux-$(scripts/get-alpine-arch.sh helm)/helm --strip-components 1
    - curl --silent --location https://git.io/JYfAY | bash
    # Install helm-docs as we need to update the Helm Chart docs when semantic-release bumps the version
    - curl --silent --location https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_$(scripts/get-alpine-arch.sh).tar.gz | tar -xzf - -C /usr/local/bin helm-docs
    - npm install @semantic-release/gitlab @semantic-release/changelog @semantic-release/exec @semantic-release/git
    - cp -p .semver-release/.releaserc-pre.yml .releaserc.yml
  rules:
    # Don't run on the auto-release commit. There may be another way...
    - if: $CI_COMMIT_MESSAGE =~ $RELEASE_COMMIT_MESSAGE
      when: never
    - if: $CI_COMMIT_REF_NAME =~ $PRE_RELEASE_BRANCHES_PATTERN
      when: always
    # This matches pre-releases
    - if: $CI_COMMIT_REF_NAME =~ /^([0-9]+)\.([0-9]+)\.([0-9]+)(?:-([0-9A-Za-z-]+(?:\.[0-9A-Za-z-]+)*))?(?:\+[0-9A-Za-z-]+)?$/
      when: always
  script:
    - npx semantic-release
  artifacts:
    paths:
      - "*.tgz"
    expire_in: 1 week

release:
  stage: release
  tags:
  - helm-ci
  image:
    name: node:19-alpine
    entrypoint: ["sh", "-c"]
  variables:
    GIT_AUTHOR_NAME: smile-release-bot
    GIT_AUTHOR_EMAIL: smile-release-bot@smilecdr.com
    GIT_COMMITTER_NAME: smile-release-bot
    GIT_COMMITTER_EMAIL: smile-release-bot@smilecdr.com
  before_script:
    - apk add bash curl jq git
    # Install helm & dyff as they are needed in check outputs script.
    - curl --silent --location https://get.helm.sh/helm-v3.10.1-linux-$(scripts/get-alpine-arch.sh helm).tar.gz | tar -xvzf - -C /usr/local/bin linux-$(scripts/get-alpine-arch.sh helm)/helm --strip-components 1
    - curl --silent --location https://git.io/JYfAY | bash
    # Install helm-docs as we need to update the Helm Chart docs when semantic-release bumps the version
    - curl --silent --location https://github.com/norwoodj/helm-docs/releases/download/v1.11.0/helm-docs_1.11.0_Linux_$(scripts/get-alpine-arch.sh).tar.gz | tar -xzf - -C /usr/local/bin helm-docs
    - npm install @semantic-release/gitlab @semantic-release/changelog @semantic-release/exec @semantic-release/git
    - cp -p .semver-release/.releaserc-main.yml .releaserc.yml
  rules:
    - if: $CI_COMMIT_MESSAGE =~ $RELEASE_COMMIT_MESSAGE
      when: never
    - if: $CI_COMMIT_REF_NAME =~ $RELEASE_BRANCHES_PATTERN
      when: always
    # This matches maintenance branches
    - if: $CI_COMMIT_REF_NAME =~ /^(([0-9]+)\.)?([0-9]+)\.x/
      when: always
  script:
    - npx semantic-release
  artifacts:
    paths:
      - "*.tgz"
    expire_in: 1 week
